; This is the Calva REPL Window.
; It's just a file, really, with some special treatment from Calva.
; Use it as a REPL input prompt if you like. (When the REPL is connected.)
; TIPS: The keyboard shortcut `ctrl+alt+o r` shows and focuses this window
; Please see https://calva.io/repl-window/ for more info.
; Happy coding! ♥️

; TIPS: As with any Clojure file when the REPL is connected:
; - `alt+enter` evaluates the current top level form.
; - `ctrl+enter` evaluates the current form.
; Special for this file:
; - `alt+up` and `alt+down` traverse up and down the REPL command history
;    when the cursor is after the last contents at the prompt
; 
; See also the Calva Inspector: https://calva.io/inspector/

PLEASE NOTE
We will update the default location of this file.
The new default location will be
  "<projectRootPath>/.calva/repl.calva-repl"
For now the legacy path is used by default.
To give yourself a smooth transition, you can opt in
to the change, by configuring this setting as false:
  "calva.useLegacyReplWindowPath"
and then add "**/.calva/repl.calva-repl" to your ".gitignore" file.


This file is configured as the output destination for all REPL output.
You can configure this with the setting:
  "calva.outputDestinations"


; Jacking in...
; Connecting using "Leiningen" project type.
; You can make Calva auto-select this.
;   - See https://calva.io/connect-sequences/
; 

; Starting Jack-in: (cd /Users/ricardo.ruiz/temp/src/clojure-property-based-testing; lein update-in :dependencies conj '[nrepl,"1.3.1"]' -- update-in :plugins conj '[cider/cider-nrepl,"0.55.4"]' -- update-in '[:repl-options,:nrepl-middleware]' conj '["cider.nrepl/cider-middleware"]' -- repl :headless)
; Using host:port 127.0.0.1:61336 ...
; Hooking up nREPL sessions ...
; Connected session: clj
; Evaluating code from settings: 'calva.autoEvaluateCode.onConnect.clj'
(when-let [requires (resolve 'clojure.main/repl-requires)] (clojure.core/apply clojure.core/require @requires))
nil
clj꞉clojure-property-based-testing.core꞉> 
; Jack-in done.
clj꞉clojure-property-based-testing.core꞉> 
; Evaluating file: models.clj
#'clojure-property-based-testing.models/Hospital
clj꞉clojure-property-based-testing.models꞉> 
; Evaluating file: logic_test.clj
; 
; ; clj  clojure-property-based-testing.logic-test 
; Syntax error compiling at (test/clojure_property_based_testing/logic_test.clj:100:10).
; No such var: m/aa
; Evaluation of file logic_test.clj failed: class clojure.lang.Compiler$CompilerException
clj꞉clojure-property-based-testing.logic-test꞉> 
(println (gen/generate m/aa))
; Syntax error compiling at (test/clojure_property_based_testing/logic_test.clj:100:10).
; No such var: m/aa
clj꞉clojure-property-based-testing.logic-test꞉> 
; Evaluating file: logic_test.clj
; 
; Syntax error compiling at (test/clojure_property_based_testing/logic_test.clj:100:10).
; No such var: m/aa
; Evaluation of file logic_test.clj failed: class clojure.lang.Compiler$CompilerException
clj꞉clojure-property-based-testing.logic-test꞉> 
(println (gen/generate m/Department))
; Execution error (NullPointerException) at clojure.test.check.generators/call-gen (generators.cljc:43).
; Cannot invoke "clojure.lang.IFn.invoke(Object, Object)" because "generator_fn" is null
clj꞉clojure-property-based-testing.logic-test꞉> 
; Evaluating file: logic_test.clj
; 
; Execution error (NullPointerException) at clojure.test.check.generators/call-gen (generators.cljc:43).
; Cannot invoke "clojure.lang.IFn.invoke(Object, Object)" because "generator_fn" is null
; Evaluation of file logic_test.clj failed: class clojure.lang.Compiler$CompilerException
clj꞉clojure-property-based-testing.logic-test꞉> 
; Evaluating file: logic_test.clj
; 
; Syntax error compiling at (test/clojure_property_based_testing/logic_test.clj:101:10).
; No such var: c/generate
; Evaluation of file logic_test.clj failed: class clojure.lang.Compiler$CompilerException
clj꞉clojure-property-based-testing.logic-test꞉> 
(println (c/generate m/Department))
; Syntax error compiling at (test/clojure_property_based_testing/logic_test.clj:101:10).
; No such var: c/generate
clj꞉clojure-property-based-testing.logic-test꞉> 
; Evaluating file: logic_test.clj
; 
; Syntax error compiling at (test/clojure_property_based_testing/logic_test.clj:101:10).
; No such var: c/generate
; Evaluation of file logic_test.clj failed: class clojure.lang.Compiler$CompilerException
clj꞉clojure-property-based-testing.logic-test꞉> 
(println (c/generate m/Department))
; Syntax error compiling at (test/clojure_property_based_testing/logic_test.clj:101:10).
; No such var: c/generate
clj꞉clojure-property-based-testing.logic-test꞉> 
(println (sg/generate m/Department))
; Syntax error compiling at (test/clojure_property_based_testing/logic_test.clj:101:10).
; No such namespace: sg
clj꞉clojure-property-based-testing.logic-test꞉> 
; Evaluating file: logic_test.clj
; 
; Syntax error compiling at (test/clojure_property_based_testing/logic_test.clj:1:1).
; Found lib name 'schema-generators.generators' containing period with prefix 'quote'.  lib names inside prefix lists must not contain periods
; Evaluation of file logic_test.clj failed: class clojure.lang.Compiler$CompilerException
clj꞉clojure-property-based-testing.logic-test꞉> 
(println (sg/generate m/Department))
; Syntax error compiling at (test/clojure_property_based_testing/logic_test.clj:101:10).
; No such namespace: sg
clj꞉clojure-property-based-testing.logic-test꞉> 
; Evaluating file: logic_test.clj
; 
; Execution error (NullPointerException) at clojure.test.check.rose-tree/fmap (rose_tree.cljc:77).
; Cannot invoke "clojure.lang.IFn.invoke(Object)" because "f" is null
; Evaluation of file logic_test.clj failed: class clojure.lang.Compiler$CompilerException
clj꞉clojure-property-based-testing.logic-test꞉> 
(println (sg/generate m/Department))
; Execution error (NullPointerException) at clojure.test.check.rose-tree/fmap (rose_tree.cljc:77).
; Cannot invoke "clojure.lang.IFn.invoke(Object)" because "f" is null
clj꞉clojure-property-based-testing.logic-test꞉> 
; Evaluating file: models.clj
#'clojure-property-based-testing.models/aa
clj꞉clojure-property-based-testing.models꞉> 
; Evaluating file: logic_test.clj
; 
; ; clj  clojure-property-based-testing.logic-test 
; Syntax error compiling at (test/clojure_property_based_testing/logic_test.clj:101:10).
; No such namespace: n
; Evaluation of file logic_test.clj failed: class clojure.lang.Compiler$CompilerException
clj꞉clojure-property-based-testing.logic-test꞉> 
(println (sg/generate n/aa))
; Syntax error compiling at (test/clojure_property_based_testing/logic_test.clj:101:10).
; No such namespace: n
clj꞉clojure-property-based-testing.logic-test꞉> 
(println (sg/generate m/aa))
; Execution error (NullPointerException) at clojure.test.check.rose-tree/fmap (rose_tree.cljc:77).
; Cannot invoke "clojure.lang.IFn.invoke(Object)" because "f" is null
clj꞉clojure-property-based-testing.logic-test꞉> 
; Evaluating file: logic_test.clj
; 
; Execution error (NullPointerException) at clojure.test.check.rose-tree/fmap (rose_tree.cljc:77).
; Cannot invoke "clojure.lang.IFn.invoke(Object)" because "f" is null
; Evaluation of file logic_test.clj failed: class clojure.lang.Compiler$CompilerException
clj꞉clojure-property-based-testing.logic-test꞉> 
; Evaluating file: logic_test.clj
#'clojure-property-based-testing.logic-test/arrives-at-test
clj꞉clojure-property-based-testing.logic-test꞉> 
; Evaluating file: models.clj
; 
; ; clj  clojure-property-based-testing.models 
; Syntax error compiling at (src/clojure_property_based_testing/models.clj:21:10).
; No such namespace: m
; Evaluation of file models.clj failed: class clojure.lang.Compiler$CompilerException
clj꞉clojure-property-based-testing.models꞉> 
(println (sg/generate m/aa))
; Syntax error compiling at (src/clojure_property_based_testing/models.clj:21:10).
; No such namespace: m
clj꞉clojure-property-based-testing.models꞉> 
(println (sg/generate m/aa))
; Syntax error compiling at (src/clojure_property_based_testing/models.clj:21:10).
; No such namespace: m
clj꞉clojure-property-based-testing.models꞉> 
(println (sg/generate aa))
; Execution error (NullPointerException) at clojure.test.check.rose-tree/fmap (rose_tree.cljc:77).
; Cannot invoke "clojure.lang.IFn.invoke(Object)" because "f" is null
clj꞉clojure-property-based-testing.models꞉> 
; Evaluating file: models.clj
; 
; Execution error (NullPointerException) at clojure.test.check.rose-tree/fmap (rose_tree.cljc:77).
; Cannot invoke "clojure.lang.IFn.invoke(Object)" because "f" is null
; Evaluation of file models.clj failed: class clojure.lang.Compiler$CompilerException
clj꞉clojure-property-based-testing.models꞉> 
(println (sg/generate aa))
; Execution error (NullPointerException) at clojure.test.check.rose-tree/fmap (rose_tree.cljc:77).
; Cannot invoke "clojure.lang.IFn.invoke(Object)" because "f" is null
clj꞉clojure-property-based-testing.models꞉> 
(println (sg/generate aa))
; Execution error (NullPointerException) at clojure.test.check.rose-tree/fmap (rose_tree.cljc:77).
; Cannot invoke "clojure.lang.IFn.invoke(Object)" because "f" is null
clj꞉clojure-property-based-testing.models꞉> 
; Evaluating file: models.clj
; 
; Execution error (NullPointerException) at clojure.test.check.rose-tree/fmap (rose_tree.cljc:77).
; Cannot invoke "clojure.lang.IFn.invoke(Object)" because "f" is null
; Evaluation of file models.clj failed: class clojure.lang.Compiler$CompilerException
clj꞉clojure-property-based-testing.models꞉> 
; Evaluating file: models.clj
; 
; Execution error (NullPointerException) at clojure.test.check.rose-tree/fmap (rose_tree.cljc:77).
; Cannot invoke "clojure.lang.IFn.invoke(Object)" because "f" is null
; Evaluation of file models.clj failed: class clojure.lang.Compiler$CompilerException
clj꞉clojure-property-based-testing.models꞉> 
; nREPL Connection was closed
; Jacking in...
; Connecting using "Leiningen" project type.
; You can make Calva auto-select this.
;   - See https://calva.io/connect-sequences/
; 

; Starting Jack-in: (cd /Users/ricardo.ruiz/temp/src/clojure-property-based-testing; lein update-in :dependencies conj '[nrepl,"1.3.1"]' -- update-in :plugins conj '[cider/cider-nrepl,"0.55.4"]' -- update-in '[:repl-options,:nrepl-middleware]' conj '["cider.nrepl/cider-middleware"]' -- repl :headless)
; Using host:port 127.0.0.1:61910 ...
; Hooking up nREPL sessions ...
; Connected session: clj
; Evaluating code from settings: 'calva.autoEvaluateCode.onConnect.clj'
(when-let [requires (resolve 'clojure.main/repl-requires)] (clojure.core/apply clojure.core/require @requires))
nil
clj꞉clojure-property-based-testing.core꞉> 
; Jack-in done.
clj꞉clojure-property-based-testing.core꞉> 
; Evaluating file: models.clj
; 
; ; clj  clojure-property-based-testing.models 
; Execution error (NullPointerException) at clojure.test.check.rose-tree/fmap (rose_tree.cljc:77).
; Cannot invoke "clojure.lang.IFn.invoke(Object)" because "f" is null
; Evaluation of file models.clj failed: class clojure.lang.Compiler$CompilerException
clj꞉clojure-property-based-testing.models꞉> 
(println (sg/generate aa))
; Execution error (NullPointerException) at clojure.test.check.rose-tree/fmap (rose_tree.cljc:77).
; Cannot invoke "clojure.lang.IFn.invoke(Object)" because "f" is null
clj꞉clojure-property-based-testing.models꞉> 
(println (sg/generate aa))
; Execution error (NullPointerException) at clojure.test.check.rose-tree/fmap (rose_tree.cljc:77).
; Cannot invoke "clojure.lang.IFn.invoke(Object)" because "f" is null
clj꞉clojure-property-based-testing.models꞉> 
(println (sg/generate aa))
; Execution error (NullPointerException) at clojure.test.check.rose-tree/fmap (rose_tree.cljc:77).
; Cannot invoke "clojure.lang.IFn.invoke(Object)" because "f" is null
clj꞉clojure-property-based-testing.models꞉> 
; Evaluating file: models.clj
; 
; Execution error (NullPointerException) at clojure.test.check.rose-tree/fmap (rose_tree.cljc:77).
; Cannot invoke "clojure.lang.IFn.invoke(Object)" because "f" is null
; Evaluation of file models.clj failed: class clojure.lang.Compiler$CompilerException
clj꞉clojure-property-based-testing.models꞉> 
; nREPL Connection was closed
; Jacking in...
; Connecting using "Leiningen" project type.
; You can make Calva auto-select this.
;   - See https://calva.io/connect-sequences/
; 

; Starting Jack-in: (cd /Users/ricardo.ruiz/temp/src/clojure-property-based-testing; lein update-in :dependencies conj '[nrepl,"1.3.1"]' -- update-in :plugins conj '[cider/cider-nrepl,"0.55.4"]' -- update-in '[:repl-options,:nrepl-middleware]' conj '["cider.nrepl/cider-middleware"]' -- repl :headless)
; Using host:port 127.0.0.1:61997 ...
; Hooking up nREPL sessions ...
; Connected session: clj
; Evaluating code from settings: 'calva.autoEvaluateCode.onConnect.clj'
(when-let [requires (resolve 'clojure.main/repl-requires)] (clojure.core/apply clojure.core/require @requires))
nil
clj꞉clojure-property-based-testing.core꞉> 
; Jack-in done.
clj꞉clojure-property-based-testing.core꞉> 
(println (sg/generate aa))
; Syntax error compiling at (src/clojure_property_based_testing/models.clj:20:10).
; Unable to resolve symbol: aa in this context
clj꞉clojure-property-based-testing.models꞉> 
; Evaluating file: models.clj
; 
; ; clj  clojure-property-based-testing.models 
; Execution error (NullPointerException) at clojure.test.check.rose-tree/fmap (rose_tree.cljc:77).
; Cannot invoke "clojure.lang.IFn.invoke(Object)" because "f" is null
; Evaluation of file models.clj failed: class clojure.lang.Compiler$CompilerException
clj꞉clojure-property-based-testing.models꞉> 
(println (sg/generate aa))
; Execution error (NullPointerException) at clojure.test.check.rose-tree/fmap (rose_tree.cljc:77).
; Cannot invoke "clojure.lang.IFn.invoke(Object)" because "f" is null
clj꞉clojure-property-based-testing.models꞉> 
(println (sg/generate aa))
; Execution error (NullPointerException) at clojure.test.check.rose-tree/fmap (rose_tree.cljc:77).
; Cannot invoke "clojure.lang.IFn.invoke(Object)" because "f" is null
clj꞉clojure-property-based-testing.models꞉> 
; Evaluating file: models.clj
#'clojure-property-based-testing.models/aa
clj꞉clojure-property-based-testing.models꞉> 
; Evaluating file: core.clj
; 
; ; clj  test.correct 
; Execution error (NullPointerException) at clojure.test.check.generators/call-gen (generators.cljc:43).
; Cannot invoke "clojure.lang.IFn.invoke(Object, Object)" because "generator_fn" is null
; Evaluation of file core.clj failed: class clojure.lang.Compiler$CompilerException
clj꞉test.correct꞉> 
; Evaluating file: core.clj
; 
; Execution error (NullPointerException) at clojure.test.check.generators/call-gen (generators.cljc:43).
; Cannot invoke "clojure.lang.IFn.invoke(Object, Object)" because "generator_fn" is null
; Evaluation of file core.clj failed: class clojure.lang.Compiler$CompilerException
clj꞉test.correct꞉> 
(println (gen/generate aa))
; Execution error (NullPointerException) at clojure.test.check.generators/call-gen (generators.cljc:43).
; Cannot invoke "clojure.lang.IFn.invoke(Object, Object)" because "generator_fn" is null
clj꞉test.correct꞉> 
; Evaluating file: core.clj
#'clojure-property-based-testing.core/foo
clj꞉clojure-property-based-testing.core꞉> 
; Evaluating file: models.clj
#'clojure-property-based-testing.models/aa
clj꞉clojure-property-based-testing.models꞉> 
; Evaluating file: models.clj
#'clojure-property-based-testing.models/aa
clj꞉clojure-property-based-testing.models꞉> 
; Evaluating file: models.clj
#'clojure-property-based-testing.models/aa
clj꞉clojure-property-based-testing.models꞉> 
; Evaluating file: models.clj
#'clojure-property-based-testing.models/Hospital
clj꞉clojure-property-based-testing.models꞉> 
; Evaluating file: models.clj
#'clojure-property-based-testing.models/Hospital
clj꞉clojure-property-based-testing.models꞉> 
; Evaluating file: models.clj
#'clojure-property-based-testing.models/aa
clj꞉clojure-property-based-testing.models꞉> 
; Evaluating file: models.clj
; 
; Execution error (NullPointerException) at clojure.test.check.rose-tree/fmap (rose_tree.cljc:77).
; Cannot invoke "clojure.lang.IFn.invoke(Object)" because "f" is null
; Evaluation of file models.clj failed: class clojure.lang.Compiler$CompilerException
clj꞉clojure-property-based-testing.models꞉> 
(println (sg/generate aa))
; Execution error (NullPointerException) at clojure.test.check.rose-tree/fmap (rose_tree.cljc:77).
; Cannot invoke "clojure.lang.IFn.invoke(Object)" because "f" is null
clj꞉clojure-property-based-testing.models꞉> 
; Evaluating file: models.clj
; 
; Execution error (NullPointerException) at clojure.test.check.rose-tree/fmap (rose_tree.cljc:77).
; Cannot invoke "clojure.lang.IFn.invoke(Object)" because "f" is null
; Evaluation of file models.clj failed: class clojure.lang.Compiler$CompilerException
clj꞉clojure-property-based-testing.models꞉> 
(println (sg/generate aa))
; Execution error (NullPointerException) at clojure.test.check.rose-tree/fmap (rose_tree.cljc:77).
; Cannot invoke "clojure.lang.IFn.invoke(Object)" because "f" is null
clj꞉clojure-property-based-testing.models꞉> 
(count (sg/generate aa))
; Execution error (NullPointerException) at clojure.test.check.rose-tree/fmap (rose_tree.cljc:77).
; Cannot invoke "clojure.lang.IFn.invoke(Object)" because "f" is null
clj꞉clojure-property-based-testing.models꞉> 
(count sg/generate aa)
; Syntax error (ArityException) compiling count at (src/clojure_property_based_testing/models.clj:20:1).
; Wrong number of args (2) passed to: clojure.core/count--inliner--5586
clj꞉clojure-property-based-testing.models꞉> 
(count  (sg/generate aa))
; Execution error (NullPointerException) at clojure.test.check.rose-tree/fmap (rose_tree.cljc:77).
; Cannot invoke "clojure.lang.IFn.invoke(Object)" because "f" is null
clj꞉clojure-property-based-testing.models꞉> 
; Evaluating file: models.clj
; 
; Execution error (NullPointerException) at clojure.test.check.rose-tree/fmap (rose_tree.cljc:77).
; Cannot invoke "clojure.lang.IFn.invoke(Object)" because "f" is null
; Evaluation of file models.clj failed: class clojure.lang.Compiler$CompilerException
clj꞉clojure-property-based-testing.models꞉> 
; Evaluating file: models.clj
; 
; Syntax error compiling at (src/clojure_property_based_testing/models.clj:1:1).
; Found lib name 'schema-generators.complete' containing period with prefix 'quote'.  lib names inside prefix lists must not contain periods
; Evaluation of file models.clj failed: class clojure.lang.Compiler$CompilerException
clj꞉clojure-property-based-testing.models꞉> 
; Evaluating file: models.clj
; 
; Syntax error compiling at (src/clojure_property_based_testing/models.clj:1:1).
; Found lib name 'schema-generators.complete' containing period with prefix 'quote'.  lib names inside prefix lists must not contain periods
; Evaluation of file models.clj failed: class clojure.lang.Compiler$CompilerException
clj꞉clojure-property-based-testing.models꞉> 
; Evaluating file: models.clj
; 
; Syntax error compiling at (src/clojure_property_based_testing/models.clj:1:1).
; Found lib name 'schema-generators.complete' containing period with prefix 'quote'.  lib names inside prefix lists must not contain periods
; Evaluation of file models.clj failed: class clojure.lang.Compiler$CompilerException
clj꞉clojure-property-based-testing.models꞉> 
; Evaluating file: models.clj
; 
; Syntax error compiling at (src/clojure_property_based_testing/models.clj:1:1).
; Found lib name 'schema-generators.complete' containing period with prefix 'quote'.  lib names inside prefix lists must not contain periods
; Evaluation of file models.clj failed: class clojure.lang.Compiler$CompilerException
clj꞉clojure-property-based-testing.models꞉> 
; Evaluating file: models.clj
; 
; Syntax error compiling at (src/clojure_property_based_testing/models.clj:1:1).
; Found lib name 'schema-generators.complete' containing period with prefix 'quote'.  lib names inside prefix lists must not contain periods
; Evaluation of file models.clj failed: class clojure.lang.Compiler$CompilerException
clj꞉clojure-property-based-testing.models꞉> 
; Evaluating file: models.clj
; 
; Execution error (ArityException) at schema-generators.complete/complete (complete.cljc:103).
; Wrong number of args (0) passed to: schema-generators.complete/eval16779/completer--16796
; Evaluation of file models.clj failed: class clojure.lang.Compiler$CompilerException
clj꞉clojure-property-based-testing.models꞉> 
; Evaluating file: models.clj
; 
; Execution error (ArityException) at schema-generators.complete/complete (complete.cljc:103).
; Wrong number of args (0) passed to: schema-generators.complete/eval16779/completer--16796
; Evaluation of file models.clj failed: class clojure.lang.Compiler$CompilerException
clj꞉clojure-property-based-testing.models꞉> 
(count  (c/complete {:a 1} aa))
1
clj꞉clojure-property-based-testing.models꞉> 
(count  (c/complete {:a 1} aa))
1
clj꞉clojure-property-based-testing.models꞉> 
(count  (c/complete {:a 1} aa))
1
clj꞉clojure-property-based-testing.models꞉> 
(c/complete {:a 1} aa)
{:a 1}
clj꞉clojure-property-based-testing.models꞉> 
(c/complete {:a 1} aa)
{:a 1}
clj꞉clojure-property-based-testing.models꞉> 
(g/generate aa)
; Syntax error compiling at (src/clojure_property_based_testing/models.clj:23:1).
; No such namespace: g
clj꞉clojure-property-based-testing.models꞉> 
; Evaluating file: models.clj
; 
; Execution error (NullPointerException) at clojure.test.check.rose-tree/fmap (rose_tree.cljc:77).
; Cannot invoke "clojure.lang.IFn.invoke(Object)" because "f" is null
; Evaluation of file models.clj failed: class clojure.lang.Compiler$CompilerException
clj꞉clojure-property-based-testing.models꞉> 
(g/generate aa)
; Execution error (NullPointerException) at clojure.test.check.rose-tree/fmap (rose_tree.cljc:77).
; Cannot invoke "clojure.lang.IFn.invoke(Object)" because "f" is null
clj꞉clojure-property-based-testing.models꞉> 
; Evaluating file: models.clj
; 
; Execution error (ClassCastException) at clojure-property-based-testing.core/eval16902 (REPL:1).
; class schema.core.Predicate cannot be cast to class clojure.lang.IFn (schema.core.Predicate is in unnamed module of loader clojure.lang.DynamicClassLoader @43cd20f7; clojure.lang.IFn is in unnamed module of loader 'app')
; Evaluation of file models.clj failed: class clojure.lang.Compiler$CompilerException
clj꞉clojure-property-based-testing.models꞉> 
(g/generate aa)
; Execution error (NullPointerException) at clojure.test.check.rose-tree/fmap (rose_tree.cljc:77).
; Cannot invoke "clojure.lang.IFn.invoke(Object)" because "f" is null
clj꞉clojure-property-based-testing.models꞉> 
; Evaluating file: models.clj
; 
; Execution error (ClassCastException) at clojure-property-based-testing.core/eval16919 (REPL:1).
; class schema.core.Predicate cannot be cast to class clojure.lang.IFn (schema.core.Predicate is in unnamed module of loader clojure.lang.DynamicClassLoader @43cd20f7; clojure.lang.IFn is in unnamed module of loader 'app')
; Evaluation of file models.clj failed: class clojure.lang.Compiler$CompilerException
clj꞉clojure-property-based-testing.models꞉> 
(g/generate aa)
; Execution error (NullPointerException) at clojure.test.check.rose-tree/fmap (rose_tree.cljc:77).
; Cannot invoke "clojure.lang.IFn.invoke(Object)" because "f" is null
clj꞉clojure-property-based-testing.models꞉> 
; Evaluating file: models.clj
; 
; Execution error (NullPointerException) at clojure.test.check.rose-tree/fmap (rose_tree.cljc:77).
; Cannot invoke "clojure.lang.IFn.invoke(Object)" because "f" is null
; Evaluation of file models.clj failed: class clojure.lang.Compiler$CompilerException
clj꞉clojure-property-based-testing.models꞉> 
(s/defschema aa {:a s/Int})
#'clojure-property-based-testing.models/aa
clj꞉clojure-property-based-testing.models꞉> 
(g/generate aa)
; Execution error (NullPointerException) at clojure.test.check.rose-tree/fmap (rose_tree.cljc:77).
; Cannot invoke "clojure.lang.IFn.invoke(Object)" because "f" is null
clj꞉clojure-property-based-testing.models꞉> 
(s/defschema aa {:a s/Int})
#'clojure-property-based-testing.models/aa
clj꞉clojure-property-based-testing.models꞉> 
(g/generate aa)
; Execution error (NullPointerException) at clojure.test.check.rose-tree/fmap (rose_tree.cljc:77).
; Cannot invoke "clojure.lang.IFn.invoke(Object)" because "f" is null
clj꞉clojure-property-based-testing.models꞉> 
; Evaluating file: models.clj
; 
; Execution error (NullPointerException) at clojure.test.check.rose-tree/fmap (rose_tree.cljc:77).
; Cannot invoke "clojure.lang.IFn.invoke(Object)" because "f" is null
; Evaluation of file models.clj failed: class clojure.lang.Compiler$CompilerException
clj꞉clojure-property-based-testing.models꞉> 
; Evaluating file: models.clj
; 
; Execution error (NullPointerException) at clojure.test.check.rose-tree/fmap (rose_tree.cljc:77).
; Cannot invoke "clojure.lang.IFn.invoke(Object)" because "f" is null
; Evaluation of file models.clj failed: class clojure.lang.Compiler$CompilerException
clj꞉clojure-property-based-testing.models꞉> 
(s/def aa {:a s/Int})
#'clojure-property-based-testing.models/aa
clj꞉clojure-property-based-testing.models꞉> 
(g/generate aa)
; Execution error (NullPointerException) at clojure.test.check.rose-tree/fmap (rose_tree.cljc:77).
; Cannot invoke "clojure.lang.IFn.invoke(Object)" because "f" is null
clj꞉clojure-property-based-testing.models꞉> 
; Evaluating file: models.clj
; 
; Execution error (NullPointerException) at clojure.test.check.rose-tree/fmap (rose_tree.cljc:77).
; Cannot invoke "clojure.lang.IFn.invoke(Object)" because "f" is null
; Evaluation of file models.clj failed: class clojure.lang.Compiler$CompilerException
clj꞉clojure-property-based-testing.models꞉> 
(s/def aa {:a s/Int})
#'clojure-property-based-testing.models/aa
clj꞉clojure-property-based-testing.models꞉> 
; Evaluating file: models.clj
; 
; Execution error (NullPointerException) at clojure.test.check.rose-tree/fmap (rose_tree.cljc:77).
; Cannot invoke "clojure.lang.IFn.invoke(Object)" because "f" is null
; Evaluation of file models.clj failed: class clojure.lang.Compiler$CompilerException
clj꞉clojure-property-based-testing.models꞉> 
(def aa {:a s/Int})
#'clojure-property-based-testing.models/aa
clj꞉clojure-property-based-testing.models꞉> 
(g/generate aa)
; Execution error (NullPointerException) at clojure.test.check.rose-tree/fmap (rose_tree.cljc:77).
; Cannot invoke "clojure.lang.IFn.invoke(Object)" because "f" is null
clj꞉clojure-property-based-testing.models꞉> 
(def aa {:a s/Int})
#'clojure-property-based-testing.models/aa
clj꞉clojure-property-based-testing.models꞉> 
(g/generate aa)
; Execution error (NullPointerException) at clojure.test.check.rose-tree/fmap (rose_tree.cljc:77).
; Cannot invoke "clojure.lang.IFn.invoke(Object)" because "f" is null
clj꞉clojure-property-based-testing.models꞉> (def aa {:a s/Int})
#'clojure-property-based-testing.models/aa
clj꞉clojure-property-based-testing.models꞉> 
(g/generate aa)
; Execution error (NullPointerException) at clojure.test.check.rose-tree/fmap (rose_tree.cljc:77).
; Cannot invoke "clojure.lang.IFn.invoke(Object)" because "f" is null
clj꞉clojure-property-based-testing.models꞉> 
; Evaluating file: models.clj
; 
; Execution error (NullPointerException) at clojure.test.check.rose-tree/fmap (rose_tree.cljc:77).
; Cannot invoke "clojure.lang.IFn.invoke(Object)" because "f" is null
; Evaluation of file models.clj failed: class clojure.lang.Compiler$CompilerException
clj꞉clojure-property-based-testing.models꞉> 
(g/generate OGSchema)
; Execution error (NullPointerException) at clojure.test.check.rose-tree/fmap (rose_tree.cljc:77).
; Cannot invoke "clojure.lang.IFn.invoke(Object)" because "f" is null
clj꞉clojure-property-based-testing.models꞉> 
; Evaluating file: models.clj
; 
; Execution error (NullPointerException) at clojure.test.check.rose-tree/fmap (rose_tree.cljc:77).
; Cannot invoke "clojure.lang.IFn.invoke(Object)" because "f" is null
; Evaluation of file models.clj failed: class clojure.lang.Compiler$CompilerException
clj꞉clojure-property-based-testing.models꞉> 
(g/generate OGSchema)
; Execution error (NullPointerException) at clojure.test.check.rose-tree/fmap (rose_tree.cljc:77).
; Cannot invoke "clojure.lang.IFn.invoke(Object)" because "f" is null
clj꞉clojure-property-based-testing.models꞉> 
; Evaluating file: models.clj
; 
; Syntax error compiling at (src/clojure_property_based_testing/models.clj:1:1).
; Found lib name 'schema-generators.generators' containing period with prefix 'quote'.  lib names inside prefix lists must not contain periods
; Evaluation of file models.clj failed: class clojure.lang.Compiler$CompilerException
clj꞉clojure-property-based-testing.models꞉> 
(g/generate OGSchema)
; Execution error (NullPointerException) at clojure.test.check.rose-tree/fmap (rose_tree.cljc:77).
; Cannot invoke "clojure.lang.IFn.invoke(Object)" because "f" is null
clj꞉clojure-property-based-testing.models꞉> 
; Evaluating file: models.clj
; 
; Syntax error compiling at (src/clojure_property_based_testing/models.clj:1:1).
; Found lib name 'schema-generators.generators' containing period with prefix 'quote'.  lib names inside prefix lists must not contain periods
; Evaluation of file models.clj failed: class clojure.lang.Compiler$CompilerException
clj꞉clojure-property-based-testing.models꞉> 
(g/generate OGSchema)
; Execution error (NullPointerException) at clojure.test.check.rose-tree/fmap (rose_tree.cljc:77).
; Cannot invoke "clojure.lang.IFn.invoke(Object)" because "f" is null
clj꞉clojure-property-based-testing.models꞉> 
(g/generate OGSchema)
; Execution error (NullPointerException) at clojure.test.check.rose-tree/fmap (rose_tree.cljc:77).
; Cannot invoke "clojure.lang.IFn.invoke(Object)" because "f" is null
clj꞉clojure-property-based-testing.models꞉> 
; Evaluating file: project.clj
; 
; ; clj  user 
; Syntax error compiling at (project.clj:1:1).
; Unable to resolve symbol: defproject in this context
; Evaluation of file project.clj failed: class clojure.lang.Compiler$CompilerException
clj꞉user꞉> 
; nREPL Connection was closed
; Jacking in...
; Connecting using "Leiningen" project type.
; You can make Calva auto-select this.
;   - See https://calva.io/connect-sequences/
; 

; Starting Jack-in: (cd /Users/ricardo.ruiz/temp/src/clojure-property-based-testing; lein update-in :dependencies conj '[nrepl,"1.3.1"]' -- update-in :plugins conj '[cider/cider-nrepl,"0.55.4"]' -- update-in '[:repl-options,:nrepl-middleware]' conj '["cider.nrepl/cider-middleware"]' -- repl :headless)
; Using host:port 127.0.0.1:63082 ...
; Hooking up nREPL sessions ...
; Connected session: clj
; Evaluating code from settings: 'calva.autoEvaluateCode.onConnect.clj'
(when-let [requires (resolve 'clojure.main/repl-requires)] (clojure.core/apply clojure.core/require @requires))
nil
clj꞉clojure-property-based-testing.core꞉> 
; Jack-in done.
clj꞉clojure-property-based-testing.core꞉> 
(g/generate OGSchema)
; Syntax error compiling at (src/clojure_property_based_testing/models.clj:24:1).
; No such namespace: g
clj꞉clojure-property-based-testing.models꞉> 
(g/generate OGSchema)
; Syntax error compiling at (src/clojure_property_based_testing/models.clj:24:1).
; No such namespace: g
clj꞉clojure-property-based-testing.models꞉> 
; Evaluating file: models.clj
; 
; ; clj  clojure-property-based-testing.models 
; Syntax error compiling at (src/clojure_property_based_testing/models.clj:1:1).
; Found lib name 'schema-generators.generators' containing period with prefix 'quote'.  lib names inside prefix lists must not contain periods
; Evaluation of file models.clj failed: class clojure.lang.Compiler$CompilerException
clj꞉clojure-property-based-testing.models꞉> 
; Evaluating file: models.clj
{:a ["1qt){Zj" ":dmf(04q>I"], :b [-1 23N 1 -9N 5 -1N 0 0]}
clj꞉clojure-property-based-testing.models꞉> 
; Evaluating file: models.clj
#'clojure-property-based-testing.models/Hospital
clj꞉clojure-property-based-testing.models꞉> 
; Evaluating file: models.clj
#'clojure-property-based-testing.models/Hospital
clj꞉clojure-property-based-testing.models꞉> 
; Evaluating file: models.clj
#'clojure-property-based-testing.models/Hospital
clj꞉clojure-property-based-testing.models꞉> 
; Evaluating file: logic_test.clj
#'clojure-property-based-testing.logic-test/arrives-at-test
clj꞉clojure-property-based-testing.logic-test꞉> 
(defspec arrives-at-generated-schema-success-test 10
  (properties/for-all
   [queue-as-vector (gen/vector pg/pname 0 4)
    person-to-arrive pg/pname]
   (let [queue (into m/Empty-Queue queue-as-vector)
         hospital (g/generate m/Hospital)
         expected-output {:departments {:cardiology (conj queue person-to-arrive)}}]
     (is (= expected-output
            (arrives-at hospital :cardiology person-to-arrive))))))
#'clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test
clj꞉clojure-property-based-testing.logic-test꞉> 
(defspec arrives-at-generated-schema-success-test 10
  (properties/for-all
   [queue-as-vector (gen/vector pg/pname 0 4)
    person-to-arrive pg/pname]
   (let [queue (into m/Empty-Queue queue-as-vector)
         hospital (g/generate m/Hospital)
         expected-output {:departments {:cardiology (conj queue person-to-arrive)}}]
     (is (= expected-output
            (arrives-at hospital :cardiology person-to-arrive))))))
#'clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test
clj꞉clojure-property-based-testing.logic-test꞉> 
(defspec arrives-at-generated-schema-success-test 10
  (properties/for-all
   [queue-as-vector (gen/vector pg/pname 0 4)
    person-to-arrive pg/pname]
   (let [queue (into m/Empty-Queue queue-as-vector)
         hospital (g/generate m/Hospital)
         expected-output {:departments {:cardiology (conj queue person-to-arrive)}}]
     (is (= expected-output
            (arrives-at hospital :cardiology person-to-arrive))))))
#'clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test
clj꞉clojure-property-based-testing.logic-test꞉> 
(g/generate m/Hospital)
{:departments {:pediatrics #object[clojure.lang.PersistentQueue 0x488075ae "clojure.lang.PersistentQueue@e9b61da9"], :neurology #object[clojure.lang.PersistentQueue 0x6e573c5e "clojure.lang.PersistentQueue@45"], :cardiology #object[clojure.lang.PersistentQueue 0x7980678b "clojure.lang.PersistentQueue@af3cda6c"]}}
clj꞉clojure-property-based-testing.logic-test꞉> 
(g/generate m/Hospital)
{:departments {}}
clj꞉clojure-property-based-testing.logic-test꞉> 
(g/generate m/Hospital)
{:departments {:pediatrics nil, :cardiology nil, :neurology #object[clojure.lang.PersistentQueue 0x6eb8298e "clojure.lang.PersistentQueue@8e5bc86a"]}}
clj꞉clojure-property-based-testing.logic-test꞉> 
(g/generate m/Hospital)
{:departments {:pediatrics nil, :cardiology nil, :neurology #object[clojure.lang.PersistentQueue 0x2825587c "clojure.lang.PersistentQueue@bd0b783a"]}}
clj꞉clojure-property-based-testing.logic-test꞉> 
; Evaluating file: logic_test.clj
#'clojure-property-based-testing.logic-test/arrives-at-test
clj꞉clojure-property-based-testing.logic-test꞉> 
; Evaluating file: logic_test.clj
; 
; Syntax error compiling at (test/clojure_property_based_testing/logic_test.clj:65:19).
; No such var: c/generate
; Evaluation of file logic_test.clj failed: class clojure.lang.Compiler$CompilerException
clj꞉clojure-property-based-testing.logic-test꞉> 
; Evaluating file: logic_test.clj
; 
; Syntax error compiling at (test/clojure_property_based_testing/logic_test.clj:64:19).
; No such var: c/generate
; Evaluation of file logic_test.clj failed: class clojure.lang.Compiler$CompilerException
clj꞉clojure-property-based-testing.logic-test꞉> 
; Evaluating file: logic_test.clj
; 
; Syntax error macroexpanding doseq at (test/clojure_property_based_testing/logic_test.clj:13:5).
; doseq requires an even number of forms in binding vector in clojure-property-based-testing.logic-test:13
; Evaluation of file logic_test.clj failed: class clojure.lang.Compiler$CompilerException
clj꞉clojure-property-based-testing.logic-test꞉> 
; Evaluating file: logic_test.clj
; 
; Syntax error macroexpanding doseq at (test/clojure_property_based_testing/logic_test.clj:13:5).
; doseq requires an even number of forms in binding vector in clojure-property-based-testing.logic-test:13
; Evaluation of file logic_test.clj failed: class clojure.lang.Compiler$CompilerException
clj꞉clojure-property-based-testing.logic-test꞉> 
; Evaluating file: logic_test.clj
; 
; Syntax error macroexpanding doseq at (test/clojure_property_based_testing/logic_test.clj:12:5).
; doseq requires an even number of forms in binding vector in clojure-property-based-testing.logic-test:12
; Evaluation of file logic_test.clj failed: class clojure.lang.Compiler$CompilerException
clj꞉clojure-property-based-testing.logic-test꞉> 
; Evaluating file: logic_test.clj
; 
; Syntax error macroexpanding doseq at (test/clojure_property_based_testing/logic_test.clj:12:5).
; doseq requires an even number of forms in binding vector in clojure-property-based-testing.logic-test:12
; Evaluation of file logic_test.clj failed: class clojure.lang.Compiler$CompilerException
clj꞉clojure-property-based-testing.logic-test꞉> 
; Evaluating file: logic_test.clj
; 
; Syntax error macroexpanding doseq at (test/clojure_property_based_testing/logic_test.clj:15:5).
; doseq requires an even number of forms in binding vector in clojure-property-based-testing.logic-test:15
; Evaluation of file logic_test.clj failed: class clojure.lang.Compiler$CompilerException
clj꞉clojure-property-based-testing.logic-test꞉> 
; Evaluating file: logic_test.clj
; 
; Syntax error macroexpanding doseq at (test/clojure_property_based_testing/logic_test.clj:14:5).
; doseq requires an even number of forms in binding vector in clojure-property-based-testing.logic-test:14
; Evaluation of file logic_test.clj failed: class clojure.lang.Compiler$CompilerException
clj꞉clojure-property-based-testing.logic-test꞉> 
; Evaluating file: logic_test.clj
; 
; Syntax error macroexpanding doseq at (test/clojure_property_based_testing/logic_test.clj:14:5).
; doseq requires an even number of forms in binding vector in clojure-property-based-testing.logic-test:14
; Evaluation of file logic_test.clj failed: class clojure.lang.Compiler$CompilerException
clj꞉clojure-property-based-testing.logic-test꞉> 
; Evaluating file: logic_test.clj
; 
; Syntax error macroexpanding doseq at (test/clojure_property_based_testing/logic_test.clj:14:5).
; doseq requires an even number of forms in binding vector in clojure-property-based-testing.logic-test:14
; Evaluation of file logic_test.clj failed: class clojure.lang.Compiler$CompilerException
clj꞉clojure-property-based-testing.logic-test꞉> 
(defspec arrives-at-generated-schema-success-test 10
  (properties/for-all
   [queue-as-vector (gen/vector pg/pname 0 4)
    department (g/generator m/Departments)
    hospital (c/completer {:departments {:department department}} m/Hospital)
    person-to-arrive pg/pname]
   (let [queue (into m/Empty-Queue queue-as-vector)
         expected-output {:departments {:cardiology (conj queue person-to-arrive)}}]
     (is (= expected-output
            (arrives-at hospital :cardiology person-to-arrive))))))
; Syntax error compiling at (test/clojure_property_based_testing/logic_test.clj:64:14).
; Unable to resolve symbol: department in this context
clj꞉clojure-property-based-testing.logic-test꞉> 
; Evaluating file: logic_test.clj
; 
; Syntax error macroexpanding doseq at (test/clojure_property_based_testing/logic_test.clj:14:5).
; doseq requires an even number of forms in binding vector in clojure-property-based-testing.logic-test:14
; Evaluation of file logic_test.clj failed: class clojure.lang.Compiler$CompilerException
clj꞉clojure-property-based-testing.logic-test꞉> 
; Evaluating file: logic_test.clj
; 
; Syntax error macroexpanding doseq at (test/clojure_property_based_testing/logic_test.clj:14:5).
; doseq requires an even number of forms in binding vector in clojure-property-based-testing.logic-test:14
; Evaluation of file logic_test.clj failed: class clojure.lang.Compiler$CompilerException
clj꞉clojure-property-based-testing.logic-test꞉> 
; Evaluating file: logic_test.clj
; 
; Syntax error macroexpanding doseq at (test/clojure_property_based_testing/logic_test.clj:14:5).
; doseq requires an even number of forms in binding vector in clojure-property-based-testing.logic-test:14
; Evaluation of file logic_test.clj failed: class clojure.lang.Compiler$CompilerException
clj꞉clojure-property-based-testing.logic-test꞉> 
; Evaluating file: logic_test.clj
; 
; Syntax error macroexpanding doseq at (test/clojure_property_based_testing/logic_test.clj:14:5).
; doseq requires an even number of forms in binding vector in clojure-property-based-testing.logic-test:14
; Evaluation of file logic_test.clj failed: class clojure.lang.Compiler$CompilerException
clj꞉clojure-property-based-testing.logic-test꞉> 
(defspec arrives-at-generated-schema-success-test 10
  (properties/for-all
   [queue-as-vector (gen/vector pg/pname 0 4)
    department (g/generator m/Departments)
    person-to-arrive pg/pname]
   (let [queue (into m/Empty-Queue queue-as-vector)
         hospital (c/complete {:departments {:department department}} m/Hospital)
         expected-output {:departments {:cardiology (conj queue person-to-arrive)}}]
     (is (= expected-output
            (arrives-at hospital :cardiology person-to-arrive))))))
#'clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test
clj꞉clojure-property-based-testing.logic-test꞉> 
; Evaluating file: logic_test.clj
; 
; Syntax error macroexpanding doseq at (test/clojure_property_based_testing/logic_test.clj:14:5).
; doseq requires an even number of forms in binding vector in clojure-property-based-testing.logic-test:14
; Evaluation of file logic_test.clj failed: class clojure.lang.Compiler$CompilerException
clj꞉clojure-property-based-testing.logic-test꞉> 
(deftest arrives-at-test
  (testing "It should be able to insert a new person in the queue if is not empty"
    (let [hospital        {:departments {:cardiology (into m/Empty-Queue ["1" "2"])}}
          expected-output {:departments {:cardiology (into m/Empty-Queue ["1" "2" "5"])}}]
      (is (= expected-output (arrives-at hospital :cardiology "5")))))

  (testing "It should be able to insert a new person in the queue if is not empty"
    (are [hospital person-to-add expected-output]
         (= expected-output (arrives-at hospital :cardiology person-to-add))
      {:departments {:cardiology (into m/Empty-Queue ["1" "2"])}} "5" {:departments {:cardiology (into m/Empty-Queue ["1" "2" "5"])}}
      {:departments {:cardiology (into m/Empty-Queue ["1"])}} "2" {:departments {:cardiology (into m/Empty-Queue ["1" "2"])}}))

  (testing "It should NOT be able to insert a new person in the queue if it's full"
    (doseq [{:keys [description input-hospital expected-output person-to-add]}
            [{:description     "Can't add when reach five people"
              :input-hospital  {:departments {:cardiology (into m/Empty-Queue ["1" "2" "3" "4" "5"])}}
              :expected-output {:departments {:cardiology (into m/Empty-Queue ["1" "2" "3" "4" "5"])}}
              :person-to-add   "6"}

             {:description     "Can't add when reach MORE than five people"
              :input-hospital  {:departments {:cardiology (into m/Empty-Queue ["1" "2" "3" "4" "5" "6"])}}
              :expected-output {:departments {:cardiology (into m/Empty-Queue ["1" "2" "3" "4" "5" "6"])}}
              :person-to-add   "7"}]]
      (testing description
        (is (= expected-output (arrives-at input-hospital :cardiology person-to-add))))))

  (testing "It should NOT be able to insert a new person in the queue if is null"
    (let [hospital        {:departments {:cardiology nil}}
          expected-output {:departments {:cardiology nil}}]
      (is (= expected-output (arrives-at hospital :cardiology "6"))))))
#'clojure-property-based-testing.logic-test/arrives-at-test
clj꞉clojure-property-based-testing.logic-test꞉> 
; Evaluating file: logic_test.clj
; 
; Syntax error macroexpanding doseq at (test/clojure_property_based_testing/logic_test.clj:14:5).
; doseq requires an even number of forms in binding vector in clojure-property-based-testing.logic-test:14
; Evaluation of file logic_test.clj failed: class clojure.lang.Compiler$CompilerException
clj꞉clojure-property-based-testing.logic-test꞉> 
; Evaluating file: logic_test.clj
#'clojure-property-based-testing.logic-test/arrives-at-test
clj꞉clojure-property-based-testing.logic-test꞉> 
; Evaluating file: logic_test.clj
#'clojure-property-based-testing.logic-test/arrives-at-test
clj꞉clojure-property-based-testing.logic-test꞉> 
Reloading all the things...
Reloaded: (clojure-property-based-testing.generators.person-generator clojure-property-based-testing.models clojure-property-based-testing.logic clojure-property-based-testing.logic-test clojure-property-based-testing.core)
:ok
; Running test: fits-queue-test…
; 16 tests finished, all passing 👍, ns: 1, vars: 1
clj꞉clojure-property-based-testing.logic-test꞉> 
; Evaluating file: logic_test.clj
#'clojure-property-based-testing.logic-test/arrives-at-test
clj꞉clojure-property-based-testing.logic-test꞉> 
Reloading all the things...
Reloaded: (clojure-property-based-testing.generators.person-generator clojure-property-based-testing.models clojure-property-based-testing.logic clojure-property-based-testing.logic-test clojure-property-based-testing.core)
:ok
; Running test: arrives-at-generated-schema-success-test…
; ERROR in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (logic.clj:60):
; error: clojure.lang.ExceptionInfo: Input to arrives-at does not match schema: 

	   [{:departments {:department (not (queue? :pediatrics))}} nil nil]  

 {:type :schema.core/error, :schema [#schema.core.One{:schema {:departments {(enum :neurology :cardiology :pediatrics) (maybe (queue Str))}}, :optional? false, :name hospital} #schema.core.One{:schema (enum :neurology :cardiology :pediatrics), :optional? false, :name department} #schema.core.One{:schema java.lang.String, :optional? false, :name person}], :value [#schema.utils.ErrorContainer{:error {:departments {:department (not (queue? :pediatrics))}}} :cardiology "8o2qC"], :error [{:departments {:department (not (queue? :pediatrics))}} nil nil]} (logic.clj:60)
; expected:
(= expected-output (arrives-at hospital :cardiology person-to-arrive))

; ERROR in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (logic.clj:60):
; error: clojure.lang.ExceptionInfo: Input to arrives-at does not match schema: 

	   [{:departments {:department (not (queue? :cardiology))}} nil nil]  

 {:type :schema.core/error, :schema [#schema.core.One{:schema {:departments {(enum :neurology :cardiology :pediatrics) (maybe (queue Str))}}, :optional? false, :name hospital} #schema.core.One{:schema (enum :neurology :cardiology :pediatrics), :optional? false, :name department} #schema.core.One{:schema java.lang.String, :optional? false, :name person}], :value [#schema.utils.ErrorContainer{:error {:departments {:department (not (queue? :cardiology))}}} :cardiology "D5S59"], :error [{:departments {:department (not (queue? :cardiology))}} nil nil]} (logic.clj:60)
; expected:
(= expected-output (arrives-at hospital :cardiology person-to-arrive))

; ERROR in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (logic.clj:60):
; error: clojure.lang.ExceptionInfo: Input to arrives-at does not match schema: 

	   [{:departments {:department (not (queue? :neurology))}} nil nil]  

 {:type :schema.core/error, :schema [#schema.core.One{:schema {:departments {(enum :neurology :cardiology :pediatrics) (maybe (queue Str))}}, :optional? false, :name hospital} #schema.core.One{:schema (enum :neurology :cardiology :pediatrics), :optional? false, :name department} #schema.core.One{:schema java.lang.String, :optional? false, :name person}], :value [#schema.utils.ErrorContainer{:error {:departments {:department (not (queue? :neurology))}}} :cardiology "AksX"], :error [{:departments {:department (not (queue? :neurology))}} nil nil]} (logic.clj:60)
; expected:
(= expected-output (arrives-at hospital :cardiology person-to-arrive))

; ERROR in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (logic.clj:60):
; error: clojure.lang.ExceptionInfo: Input to arrives-at does not match schema: 

	   [{:departments {:department (not (queue? :pediatrics))}} nil nil]  

 {:type :schema.core/error, :schema [#schema.core.One{:schema {:departments {(enum :neurology :cardiology :pediatrics) (maybe (queue Str))}}, :optional? false, :name hospital} #schema.core.One{:schema (enum :neurology :cardiology :pediatrics), :optional? false, :name department} #schema.core.One{:schema java.lang.String, :optional? false, :name person}], :value [#schema.utils.ErrorContainer{:error {:departments {:department (not (queue? :pediatrics))}}} :cardiology "Ltz"], :error [{:departments {:department (not (queue? :pediatrics))}} nil nil]} (logic.clj:60)
; expected:
(= expected-output (arrives-at hospital :cardiology person-to-arrive))

; ERROR in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (logic.clj:60):
; error: clojure.lang.ExceptionInfo: Input to arrives-at does not match schema: 

	   [{:departments {:department (not (queue? :pediatrics))}} nil nil]  

 {:type :schema.core/error, :schema [#schema.core.One{:schema {:departments {(enum :neurology :cardiology :pediatrics) (maybe (queue Str))}}, :optional? false, :name hospital} #schema.core.One{:schema (enum :neurology :cardiology :pediatrics), :optional? false, :name department} #schema.core.One{:schema java.lang.String, :optional? false, :name person}], :value [#schema.utils.ErrorContainer{:error {:departments {:department (not (queue? :pediatrics))}}} :cardiology "f70x5"], :error [{:departments {:department (not (queue? :pediatrics))}} nil nil]} (logic.clj:60)
; expected:
(= expected-output (arrives-at hospital :cardiology person-to-arrive))

; ERROR in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (logic.clj:60):
; error: clojure.lang.ExceptionInfo: Input to arrives-at does not match schema: 

	   [{:departments {:department (not (queue? :cardiology))}} nil nil]  

 {:type :schema.core/error, :schema [#schema.core.One{:schema {:departments {(enum :neurology :cardiology :pediatrics) (maybe (queue Str))}}, :optional? false, :name hospital} #schema.core.One{:schema (enum :neurology :cardiology :pediatrics), :optional? false, :name department} #schema.core.One{:schema java.lang.String, :optional? false, :name person}], :value [#schema.utils.ErrorContainer{:error {:departments {:department (not (queue? :cardiology))}}} :cardiology "H24"], :error [{:departments {:department (not (queue? :cardiology))}} nil nil]} (logic.clj:60)
; expected:
(= expected-output (arrives-at hospital :cardiology person-to-arrive))

; ERROR in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (logic.clj:60):
; error: clojure.lang.ExceptionInfo: Input to arrives-at does not match schema: 

	   [{:departments {:department (not (queue? :neurology))}} nil nil]  

 {:type :schema.core/error, :schema [#schema.core.One{:schema {:departments {(enum :neurology :cardiology :pediatrics) (maybe (queue Str))}}, :optional? false, :name hospital} #schema.core.One{:schema (enum :neurology :cardiology :pediatrics), :optional? false, :name department} #schema.core.One{:schema java.lang.String, :optional? false, :name person}], :value [#schema.utils.ErrorContainer{:error {:departments {:department (not (queue? :neurology))}}} :cardiology "lT0Wp"], :error [{:departments {:department (not (queue? :neurology))}} nil nil]} (logic.clj:60)
; expected:
(= expected-output (arrives-at hospital :cardiology person-to-arrive))

; ERROR in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (logic.clj:60):
; error: clojure.lang.ExceptionInfo: Input to arrives-at does not match schema: 

	   [{:departments {:department (not (queue? :neurology))}} nil nil]  

 {:type :schema.core/error, :schema [#schema.core.One{:schema {:departments {(enum :neurology :cardiology :pediatrics) (maybe (queue Str))}}, :optional? false, :name hospital} #schema.core.One{:schema (enum :neurology :cardiology :pediatrics), :optional? false, :name department} #schema.core.One{:schema java.lang.String, :optional? false, :name person}], :value [#schema.utils.ErrorContainer{:error {:departments {:department (not (queue? :neurology))}}} :cardiology "7iy"], :error [{:departments {:department (not (queue? :neurology))}} nil nil]} (logic.clj:60)
; expected:
(= expected-output (arrives-at hospital :cardiology person-to-arrive))

; ERROR in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (logic.clj:60):
; error: clojure.lang.ExceptionInfo: Input to arrives-at does not match schema: 

	   [{:departments {:department (not (queue? :pediatrics))}} nil nil]  

 {:type :schema.core/error, :schema [#schema.core.One{:schema {:departments {(enum :neurology :cardiology :pediatrics) (maybe (queue Str))}}, :optional? false, :name hospital} #schema.core.One{:schema (enum :neurology :cardiology :pediatrics), :optional? false, :name department} #schema.core.One{:schema java.lang.String, :optional? false, :name person}], :value [#schema.utils.ErrorContainer{:error {:departments {:department (not (queue? :pediatrics))}}} :cardiology "141qL"], :error [{:departments {:department (not (queue? :pediatrics))}} nil nil]} (logic.clj:60)
; expected:
(= expected-output (arrives-at hospital :cardiology person-to-arrive))

; ERROR in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (logic.clj:60):
; error: clojure.lang.ExceptionInfo: Input to arrives-at does not match schema: 

	   [{:departments {:department (not (queue? :neurology))}} nil nil]  

 {:type :schema.core/error, :schema [#schema.core.One{:schema {:departments {(enum :neurology :cardiology :pediatrics) (maybe (queue Str))}}, :optional? false, :name hospital} #schema.core.One{:schema (enum :neurology :cardiology :pediatrics), :optional? false, :name department} #schema.core.One{:schema java.lang.String, :optional? false, :name person}], :value [#schema.utils.ErrorContainer{:error {:departments {:department (not (queue? :neurology))}}} :cardiology "869"], :error [{:departments {:department (not (queue? :neurology))}} nil nil]} (logic.clj:60)
; expected:
(= expected-output (arrives-at hospital :cardiology person-to-arrive))

; 11 tests finished, problems found. 😭 errors: 10, failures: 0, ns: 1, vars: 1
clj꞉clojure-property-based-testing.logic-test꞉> 
; Evaluating file: logic_test.clj
#'clojure-property-based-testing.logic-test/arrives-at-test
clj꞉clojure-property-based-testing.logic-test꞉> 
Reloading all the things...
Reloaded: (clojure-property-based-testing.generators.person-generator clojure-property-based-testing.models clojure-property-based-testing.logic clojure-property-based-testing.logic-test clojure-property-based-testing.core)
:ok
; Running test: arrives-at-generated-schema-success-test…
; ERROR in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (logic.clj:60):
; error: clojure.lang.ExceptionInfo: Input to arrives-at does not match schema: 

	   [{:departments {:department (not (queue? :cardiology))}} nil nil]  

 {:type :schema.core/error, :schema [#schema.core.One{:schema {:departments {(enum :neurology :cardiology :pediatrics) (maybe (queue Str))}}, :optional? false, :name hospital} #schema.core.One{:schema (enum :neurology :cardiology :pediatrics), :optional? false, :name department} #schema.core.One{:schema java.lang.String, :optional? false, :name person}], :value [#schema.utils.ErrorContainer{:error {:departments {:department (not (queue? :cardiology))}}} :cardiology "D37"], :error [{:departments {:department (not (queue? :cardiology))}} nil nil]} (logic.clj:60)
; expected:
(= expected-output (arrives-at hospital :cardiology person-to-arrive))

; ERROR in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (logic.clj:60):
; error: clojure.lang.ExceptionInfo: Input to arrives-at does not match schema: 

	   [{:departments {:department (not (queue? :pediatrics))}} nil nil]  

 {:type :schema.core/error, :schema [#schema.core.One{:schema {:departments {(enum :neurology :cardiology :pediatrics) (maybe (queue Str))}}, :optional? false, :name hospital} #schema.core.One{:schema (enum :neurology :cardiology :pediatrics), :optional? false, :name department} #schema.core.One{:schema java.lang.String, :optional? false, :name person}], :value [#schema.utils.ErrorContainer{:error {:departments {:department (not (queue? :pediatrics))}}} :cardiology "3pcKQ"], :error [{:departments {:department (not (queue? :pediatrics))}} nil nil]} (logic.clj:60)
; expected:
(= expected-output (arrives-at hospital :cardiology person-to-arrive))

; ERROR in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (logic.clj:60):
; error: clojure.lang.ExceptionInfo: Input to arrives-at does not match schema: 

	   [{:departments {:department (not (queue? :pediatrics))}} nil nil]  

 {:type :schema.core/error, :schema [#schema.core.One{:schema {:departments {(enum :neurology :cardiology :pediatrics) (maybe (queue Str))}}, :optional? false, :name hospital} #schema.core.One{:schema (enum :neurology :cardiology :pediatrics), :optional? false, :name department} #schema.core.One{:schema java.lang.String, :optional? false, :name person}], :value [#schema.utils.ErrorContainer{:error {:departments {:department (not (queue? :pediatrics))}}} :cardiology "59Gn"], :error [{:departments {:department (not (queue? :pediatrics))}} nil nil]} (logic.clj:60)
; expected:
(= expected-output (arrives-at hospital :cardiology person-to-arrive))

; ERROR in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (logic.clj:60):
; error: clojure.lang.ExceptionInfo: Input to arrives-at does not match schema: 

	   [{:departments {:department (not (queue? :neurology))}} nil nil]  

 {:type :schema.core/error, :schema [#schema.core.One{:schema {:departments {(enum :neurology :cardiology :pediatrics) (maybe (queue Str))}}, :optional? false, :name hospital} #schema.core.One{:schema (enum :neurology :cardiology :pediatrics), :optional? false, :name department} #schema.core.One{:schema java.lang.String, :optional? false, :name person}], :value [#schema.utils.ErrorContainer{:error {:departments {:department (not (queue? :neurology))}}} :cardiology "7Pdu4"], :error [{:departments {:department (not (queue? :neurology))}} nil nil]} (logic.clj:60)
; expected:
(= expected-output (arrives-at hospital :cardiology person-to-arrive))

; ERROR in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (logic.clj:60):
; error: clojure.lang.ExceptionInfo: Input to arrives-at does not match schema: 

	   [{:departments {:department (not (queue? :pediatrics))}} nil nil]  

 {:type :schema.core/error, :schema [#schema.core.One{:schema {:departments {(enum :neurology :cardiology :pediatrics) (maybe (queue Str))}}, :optional? false, :name hospital} #schema.core.One{:schema (enum :neurology :cardiology :pediatrics), :optional? false, :name department} #schema.core.One{:schema java.lang.String, :optional? false, :name person}], :value [#schema.utils.ErrorContainer{:error {:departments {:department (not (queue? :pediatrics))}}} :cardiology "jt375"], :error [{:departments {:department (not (queue? :pediatrics))}} nil nil]} (logic.clj:60)
; expected:
(= expected-output (arrives-at hospital :cardiology person-to-arrive))

; ERROR in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (logic.clj:60):
; error: clojure.lang.ExceptionInfo: Input to arrives-at does not match schema: 

	   [{:departments {:department (not (queue? :cardiology))}} nil nil]  

 {:type :schema.core/error, :schema [#schema.core.One{:schema {:departments {(enum :neurology :cardiology :pediatrics) (maybe (queue Str))}}, :optional? false, :name hospital} #schema.core.One{:schema (enum :neurology :cardiology :pediatrics), :optional? false, :name department} #schema.core.One{:schema java.lang.String, :optional? false, :name person}], :value [#schema.utils.ErrorContainer{:error {:departments {:department (not (queue? :cardiology))}}} :cardiology "m1605"], :error [{:departments {:department (not (queue? :cardiology))}} nil nil]} (logic.clj:60)
; expected:
(= expected-output (arrives-at hospital :cardiology person-to-arrive))

; ERROR in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (logic.clj:60):
; error: clojure.lang.ExceptionInfo: Input to arrives-at does not match schema: 

	   [{:departments {:department (not (queue? :neurology))}} nil nil]  

 {:type :schema.core/error, :schema [#schema.core.One{:schema {:departments {(enum :neurology :cardiology :pediatrics) (maybe (queue Str))}}, :optional? false, :name hospital} #schema.core.One{:schema (enum :neurology :cardiology :pediatrics), :optional? false, :name department} #schema.core.One{:schema java.lang.String, :optional? false, :name person}], :value [#schema.utils.ErrorContainer{:error {:departments {:department (not (queue? :neurology))}}} :cardiology "6O577"], :error [{:departments {:department (not (queue? :neurology))}} nil nil]} (logic.clj:60)
; expected:
(= expected-output (arrives-at hospital :cardiology person-to-arrive))

; ERROR in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (logic.clj:60):
; error: clojure.lang.ExceptionInfo: Input to arrives-at does not match schema: 

	   [{:departments {:department (not (queue? :neurology))}} nil nil]  

 {:type :schema.core/error, :schema [#schema.core.One{:schema {:departments {(enum :neurology :cardiology :pediatrics) (maybe (queue Str))}}, :optional? false, :name hospital} #schema.core.One{:schema (enum :neurology :cardiology :pediatrics), :optional? false, :name department} #schema.core.One{:schema java.lang.String, :optional? false, :name person}], :value [#schema.utils.ErrorContainer{:error {:departments {:department (not (queue? :neurology))}}} :cardiology "FH2wi"], :error [{:departments {:department (not (queue? :neurology))}} nil nil]} (logic.clj:60)
; expected:
(= expected-output (arrives-at hospital :cardiology person-to-arrive))

; ERROR in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (logic.clj:60):
; error: clojure.lang.ExceptionInfo: Input to arrives-at does not match schema: 

	   [{:departments {:department (not (queue? :neurology))}} nil nil]  

 {:type :schema.core/error, :schema [#schema.core.One{:schema {:departments {(enum :neurology :cardiology :pediatrics) (maybe (queue Str))}}, :optional? false, :name hospital} #schema.core.One{:schema (enum :neurology :cardiology :pediatrics), :optional? false, :name department} #schema.core.One{:schema java.lang.String, :optional? false, :name person}], :value [#schema.utils.ErrorContainer{:error {:departments {:department (not (queue? :neurology))}}} :cardiology "tQ8C0"], :error [{:departments {:department (not (queue? :neurology))}} nil nil]} (logic.clj:60)
; expected:
(= expected-output (arrives-at hospital :cardiology person-to-arrive))

; ERROR in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (logic.clj:60):
; error: clojure.lang.ExceptionInfo: Input to arrives-at does not match schema: 

	   [{:departments {:department (not (queue? :pediatrics))}} nil nil]  

 {:type :schema.core/error, :schema [#schema.core.One{:schema {:departments {(enum :neurology :cardiology :pediatrics) (maybe (queue Str))}}, :optional? false, :name hospital} #schema.core.One{:schema (enum :neurology :cardiology :pediatrics), :optional? false, :name department} #schema.core.One{:schema java.lang.String, :optional? false, :name person}], :value [#schema.utils.ErrorContainer{:error {:departments {:department (not (queue? :pediatrics))}}} :cardiology "7S8"], :error [{:departments {:department (not (queue? :pediatrics))}} nil nil]} (logic.clj:60)
; expected:
(= expected-output (arrives-at hospital :cardiology person-to-arrive))

; 11 tests finished, problems found. 😭 errors: 10, failures: 0, ns: 1, vars: 1
clj꞉clojure-property-based-testing.logic-test꞉> 
; Evaluating file: logic_test.clj
#'clojure-property-based-testing.logic-test/arrives-at-test
clj꞉clojure-property-based-testing.logic-test꞉> 
Reloading all the things...
Reloaded: (clojure-property-based-testing.generators.person-generator clojure-property-based-testing.models clojure-property-based-testing.logic clojure-property-based-testing.logic-test clojure-property-based-testing.core)
:ok
; Running test: arrives-at-generated-schema-success-test…
; ERROR in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (logic.clj:60):
; error: clojure.lang.ExceptionInfo: Input to arrives-at does not match schema: 

	   [{:departments {:department (not (queue? :neurology))}} nil nil]  

 {:type :schema.core/error, :schema [#schema.core.One{:schema {:departments {(enum :neurology :cardiology :pediatrics) (maybe (queue Str))}}, :optional? false, :name hospital} #schema.core.One{:schema (enum :neurology :cardiology :pediatrics), :optional? false, :name department} #schema.core.One{:schema java.lang.String, :optional? false, :name person}], :value [#schema.utils.ErrorContainer{:error {:departments {:department (not (queue? :neurology))}}} :cardiology "B2dni"], :error [{:departments {:department (not (queue? :neurology))}} nil nil]} (logic.clj:60)
; expected:
(= expected-output (arrives-at hospital :cardiology person-to-arrive))

; ERROR in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (logic.clj:60):
; error: clojure.lang.ExceptionInfo: Input to arrives-at does not match schema: 

	   [{:departments {:department (not (queue? :neurology))}} nil nil]  

 {:type :schema.core/error, :schema [#schema.core.One{:schema {:departments {(enum :neurology :cardiology :pediatrics) (maybe (queue Str))}}, :optional? false, :name hospital} #schema.core.One{:schema (enum :neurology :cardiology :pediatrics), :optional? false, :name department} #schema.core.One{:schema java.lang.String, :optional? false, :name person}], :value [#schema.utils.ErrorContainer{:error {:departments {:department (not (queue? :neurology))}}} :cardiology "rr3"], :error [{:departments {:department (not (queue? :neurology))}} nil nil]} (logic.clj:60)
; expected:
(= expected-output (arrives-at hospital :cardiology person-to-arrive))

; ERROR in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (logic.clj:60):
; error: clojure.lang.ExceptionInfo: Input to arrives-at does not match schema: 

	   [{:departments {:department (not (queue? :cardiology))}} nil nil]  

 {:type :schema.core/error, :schema [#schema.core.One{:schema {:departments {(enum :neurology :cardiology :pediatrics) (maybe (queue Str))}}, :optional? false, :name hospital} #schema.core.One{:schema (enum :neurology :cardiology :pediatrics), :optional? false, :name department} #schema.core.One{:schema java.lang.String, :optional? false, :name person}], :value [#schema.utils.ErrorContainer{:error {:departments {:department (not (queue? :cardiology))}}} :cardiology "999"], :error [{:departments {:department (not (queue? :cardiology))}} nil nil]} (logic.clj:60)
; expected:
(= expected-output (arrives-at hospital :cardiology person-to-arrive))

; ERROR in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (logic.clj:60):
; error: clojure.lang.ExceptionInfo: Input to arrives-at does not match schema: 

	   [{:departments {:department (not (queue? :cardiology))}} nil nil]  

 {:type :schema.core/error, :schema [#schema.core.One{:schema {:departments {(enum :neurology :cardiology :pediatrics) (maybe (queue Str))}}, :optional? false, :name hospital} #schema.core.One{:schema (enum :neurology :cardiology :pediatrics), :optional? false, :name department} #schema.core.One{:schema java.lang.String, :optional? false, :name person}], :value [#schema.utils.ErrorContainer{:error {:departments {:department (not (queue? :cardiology))}}} :cardiology "pP09"], :error [{:departments {:department (not (queue? :cardiology))}} nil nil]} (logic.clj:60)
; expected:
(= expected-output (arrives-at hospital :cardiology person-to-arrive))

; ERROR in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (logic.clj:60):
; error: clojure.lang.ExceptionInfo: Input to arrives-at does not match schema: 

	   [{:departments {:department (not (queue? :neurology))}} nil nil]  

 {:type :schema.core/error, :schema [#schema.core.One{:schema {:departments {(enum :neurology :cardiology :pediatrics) (maybe (queue Str))}}, :optional? false, :name hospital} #schema.core.One{:schema (enum :neurology :cardiology :pediatrics), :optional? false, :name department} #schema.core.One{:schema java.lang.String, :optional? false, :name person}], :value [#schema.utils.ErrorContainer{:error {:departments {:department (not (queue? :neurology))}}} :cardiology "zSn"], :error [{:departments {:department (not (queue? :neurology))}} nil nil]} (logic.clj:60)
; expected:
(= expected-output (arrives-at hospital :cardiology person-to-arrive))

; ERROR in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (logic.clj:60):
; error: clojure.lang.ExceptionInfo: Input to arrives-at does not match schema: 

	   [{:departments {:department (not (queue? :neurology))}} nil nil]  

 {:type :schema.core/error, :schema [#schema.core.One{:schema {:departments {(enum :neurology :cardiology :pediatrics) (maybe (queue Str))}}, :optional? false, :name hospital} #schema.core.One{:schema (enum :neurology :cardiology :pediatrics), :optional? false, :name department} #schema.core.One{:schema java.lang.String, :optional? false, :name person}], :value [#schema.utils.ErrorContainer{:error {:departments {:department (not (queue? :neurology))}}} :cardiology "co5"], :error [{:departments {:department (not (queue? :neurology))}} nil nil]} (logic.clj:60)
; expected:
(= expected-output (arrives-at hospital :cardiology person-to-arrive))

; ERROR in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (logic.clj:60):
; error: clojure.lang.ExceptionInfo: Input to arrives-at does not match schema: 

	   [{:departments {:department (not (queue? :neurology))}} nil nil]  

 {:type :schema.core/error, :schema [#schema.core.One{:schema {:departments {(enum :neurology :cardiology :pediatrics) (maybe (queue Str))}}, :optional? false, :name hospital} #schema.core.One{:schema (enum :neurology :cardiology :pediatrics), :optional? false, :name department} #schema.core.One{:schema java.lang.String, :optional? false, :name person}], :value [#schema.utils.ErrorContainer{:error {:departments {:department (not (queue? :neurology))}}} :cardiology "AiDTe"], :error [{:departments {:department (not (queue? :neurology))}} nil nil]} (logic.clj:60)
; expected:
(= expected-output (arrives-at hospital :cardiology person-to-arrive))

; ERROR in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (logic.clj:60):
; error: clojure.lang.ExceptionInfo: Input to arrives-at does not match schema: 

	   [{:departments {:department (not (queue? :pediatrics))}} nil nil]  

 {:type :schema.core/error, :schema [#schema.core.One{:schema {:departments {(enum :neurology :cardiology :pediatrics) (maybe (queue Str))}}, :optional? false, :name hospital} #schema.core.One{:schema (enum :neurology :cardiology :pediatrics), :optional? false, :name department} #schema.core.One{:schema java.lang.String, :optional? false, :name person}], :value [#schema.utils.ErrorContainer{:error {:departments {:department (not (queue? :pediatrics))}}} :cardiology "eat"], :error [{:departments {:department (not (queue? :pediatrics))}} nil nil]} (logic.clj:60)
; expected:
(= expected-output (arrives-at hospital :cardiology person-to-arrive))

; ERROR in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (logic.clj:60):
; error: clojure.lang.ExceptionInfo: Input to arrives-at does not match schema: 

	   [{:departments {:department (not (queue? :neurology))}} nil nil]  

 {:type :schema.core/error, :schema [#schema.core.One{:schema {:departments {(enum :neurology :cardiology :pediatrics) (maybe (queue Str))}}, :optional? false, :name hospital} #schema.core.One{:schema (enum :neurology :cardiology :pediatrics), :optional? false, :name department} #schema.core.One{:schema java.lang.String, :optional? false, :name person}], :value [#schema.utils.ErrorContainer{:error {:departments {:department (not (queue? :neurology))}}} :cardiology "O6YQ"], :error [{:departments {:department (not (queue? :neurology))}} nil nil]} (logic.clj:60)
; expected:
(= expected-output (arrives-at hospital :cardiology person-to-arrive))

; ERROR in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (logic.clj:60):
; error: clojure.lang.ExceptionInfo: Input to arrives-at does not match schema: 

	   [{:departments {:department (not (queue? :pediatrics))}} nil nil]  

 {:type :schema.core/error, :schema [#schema.core.One{:schema {:departments {(enum :neurology :cardiology :pediatrics) (maybe (queue Str))}}, :optional? false, :name hospital} #schema.core.One{:schema (enum :neurology :cardiology :pediatrics), :optional? false, :name department} #schema.core.One{:schema java.lang.String, :optional? false, :name person}], :value [#schema.utils.ErrorContainer{:error {:departments {:department (not (queue? :pediatrics))}}} :cardiology "un052"], :error [{:departments {:department (not (queue? :pediatrics))}} nil nil]} (logic.clj:60)
; expected:
(= expected-output (arrives-at hospital :cardiology person-to-arrive))

; 11 tests finished, problems found. 😭 errors: 10, failures: 0, ns: 1, vars: 1
clj꞉clojure-property-based-testing.logic-test꞉> 
; Evaluating file: logic_test.clj
#'clojure-property-based-testing.logic-test/arrives-at-test
clj꞉clojure-property-based-testing.logic-test꞉> 
Reloading all the things...
Reloaded: (clojure-property-based-testing.generators.person-generator clojure-property-based-testing.models clojure-property-based-testing.logic clojure-property-based-testing.logic-test clojure-property-based-testing.core)
:ok
; Running test: arrives-at-generated-schema-success-test…
; ERROR in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (logic.clj:60):
; error: clojure.lang.ExceptionInfo: Input to arrives-at does not match schema: 

	   [{:departments {:department (not (queue? :pediatrics))}} nil nil]  

 {:type :schema.core/error, :schema [#schema.core.One{:schema {:departments {(enum :neurology :cardiology :pediatrics) (maybe (queue Str))}}, :optional? false, :name hospital} #schema.core.One{:schema (enum :neurology :cardiology :pediatrics), :optional? false, :name department} #schema.core.One{:schema java.lang.String, :optional? false, :name person}], :value [#schema.utils.ErrorContainer{:error {:departments {:department (not (queue? :pediatrics))}}} :cardiology "63HN4"], :error [{:departments {:department (not (queue? :pediatrics))}} nil nil]} (logic.clj:60)
; expected:
(= expected-output (arrives-at hospital :cardiology person-to-arrive))

; ERROR in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (logic.clj:60):
; error: clojure.lang.ExceptionInfo: Input to arrives-at does not match schema: 

	   [{:departments {:department (not (queue? :pediatrics))}} nil nil]  

 {:type :schema.core/error, :schema [#schema.core.One{:schema {:departments {(enum :neurology :cardiology :pediatrics) (maybe (queue Str))}}, :optional? false, :name hospital} #schema.core.One{:schema (enum :neurology :cardiology :pediatrics), :optional? false, :name department} #schema.core.One{:schema java.lang.String, :optional? false, :name person}], :value [#schema.utils.ErrorContainer{:error {:departments {:department (not (queue? :pediatrics))}}} :cardiology "15kn"], :error [{:departments {:department (not (queue? :pediatrics))}} nil nil]} (logic.clj:60)
; expected:
(= expected-output (arrives-at hospital :cardiology person-to-arrive))

; ERROR in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (logic.clj:60):
; error: clojure.lang.ExceptionInfo: Input to arrives-at does not match schema: 

	   [{:departments {:department (not (queue? :pediatrics))}} nil nil]  

 {:type :schema.core/error, :schema [#schema.core.One{:schema {:departments {(enum :neurology :cardiology :pediatrics) (maybe (queue Str))}}, :optional? false, :name hospital} #schema.core.One{:schema (enum :neurology :cardiology :pediatrics), :optional? false, :name department} #schema.core.One{:schema java.lang.String, :optional? false, :name person}], :value [#schema.utils.ErrorContainer{:error {:departments {:department (not (queue? :pediatrics))}}} :cardiology "RqV"], :error [{:departments {:department (not (queue? :pediatrics))}} nil nil]} (logic.clj:60)
; expected:
(= expected-output (arrives-at hospital :cardiology person-to-arrive))

; ERROR in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (logic.clj:60):
; error: clojure.lang.ExceptionInfo: Input to arrives-at does not match schema: 

	   [{:departments {:department (not (queue? :cardiology))}} nil nil]  

 {:type :schema.core/error, :schema [#schema.core.One{:schema {:departments {(enum :neurology :cardiology :pediatrics) (maybe (queue Str))}}, :optional? false, :name hospital} #schema.core.One{:schema (enum :neurology :cardiology :pediatrics), :optional? false, :name department} #schema.core.One{:schema java.lang.String, :optional? false, :name person}], :value [#schema.utils.ErrorContainer{:error {:departments {:department (not (queue? :cardiology))}}} :cardiology "rJE"], :error [{:departments {:department (not (queue? :cardiology))}} nil nil]} (logic.clj:60)
; expected:
(= expected-output (arrives-at hospital :cardiology person-to-arrive))

; ERROR in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (logic.clj:60):
; error: clojure.lang.ExceptionInfo: Input to arrives-at does not match schema: 

	   [{:departments {:department (not (queue? :pediatrics))}} nil nil]  

 {:type :schema.core/error, :schema [#schema.core.One{:schema {:departments {(enum :neurology :cardiology :pediatrics) (maybe (queue Str))}}, :optional? false, :name hospital} #schema.core.One{:schema (enum :neurology :cardiology :pediatrics), :optional? false, :name department} #schema.core.One{:schema java.lang.String, :optional? false, :name person}], :value [#schema.utils.ErrorContainer{:error {:departments {:department (not (queue? :pediatrics))}}} :cardiology "bA5"], :error [{:departments {:department (not (queue? :pediatrics))}} nil nil]} (logic.clj:60)
; expected:
(= expected-output (arrives-at hospital :cardiology person-to-arrive))

; ERROR in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (logic.clj:60):
; error: clojure.lang.ExceptionInfo: Input to arrives-at does not match schema: 

	   [{:departments {:department (not (queue? :pediatrics))}} nil nil]  

 {:type :schema.core/error, :schema [#schema.core.One{:schema {:departments {(enum :neurology :cardiology :pediatrics) (maybe (queue Str))}}, :optional? false, :name hospital} #schema.core.One{:schema (enum :neurology :cardiology :pediatrics), :optional? false, :name department} #schema.core.One{:schema java.lang.String, :optional? false, :name person}], :value [#schema.utils.ErrorContainer{:error {:departments {:department (not (queue? :pediatrics))}}} :cardiology "516E"], :error [{:departments {:department (not (queue? :pediatrics))}} nil nil]} (logic.clj:60)
; expected:
(= expected-output (arrives-at hospital :cardiology person-to-arrive))

; ERROR in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (logic.clj:60):
; error: clojure.lang.ExceptionInfo: Input to arrives-at does not match schema: 

	   [{:departments {:department (not (queue? :pediatrics))}} nil nil]  

 {:type :schema.core/error, :schema [#schema.core.One{:schema {:departments {(enum :neurology :cardiology :pediatrics) (maybe (queue Str))}}, :optional? false, :name hospital} #schema.core.One{:schema (enum :neurology :cardiology :pediatrics), :optional? false, :name department} #schema.core.One{:schema java.lang.String, :optional? false, :name person}], :value [#schema.utils.ErrorContainer{:error {:departments {:department (not (queue? :pediatrics))}}} :cardiology "ux8"], :error [{:departments {:department (not (queue? :pediatrics))}} nil nil]} (logic.clj:60)
; expected:
(= expected-output (arrives-at hospital :cardiology person-to-arrive))

; ERROR in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (logic.clj:60):
; error: clojure.lang.ExceptionInfo: Input to arrives-at does not match schema: 

	   [{:departments {:department (not (queue? :cardiology))}} nil nil]  

 {:type :schema.core/error, :schema [#schema.core.One{:schema {:departments {(enum :neurology :cardiology :pediatrics) (maybe (queue Str))}}, :optional? false, :name hospital} #schema.core.One{:schema (enum :neurology :cardiology :pediatrics), :optional? false, :name department} #schema.core.One{:schema java.lang.String, :optional? false, :name person}], :value [#schema.utils.ErrorContainer{:error {:departments {:department (not (queue? :cardiology))}}} :cardiology "8l3s"], :error [{:departments {:department (not (queue? :cardiology))}} nil nil]} (logic.clj:60)
; expected:
(= expected-output (arrives-at hospital :cardiology person-to-arrive))

; ERROR in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (logic.clj:60):
; error: clojure.lang.ExceptionInfo: Input to arrives-at does not match schema: 

	   [{:departments {:department (not (queue? :cardiology))}} nil nil]  

 {:type :schema.core/error, :schema [#schema.core.One{:schema {:departments {(enum :neurology :cardiology :pediatrics) (maybe (queue Str))}}, :optional? false, :name hospital} #schema.core.One{:schema (enum :neurology :cardiology :pediatrics), :optional? false, :name department} #schema.core.One{:schema java.lang.String, :optional? false, :name person}], :value [#schema.utils.ErrorContainer{:error {:departments {:department (not (queue? :cardiology))}}} :cardiology "idDQ"], :error [{:departments {:department (not (queue? :cardiology))}} nil nil]} (logic.clj:60)
; expected:
(= expected-output (arrives-at hospital :cardiology person-to-arrive))

; ERROR in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (logic.clj:60):
; error: clojure.lang.ExceptionInfo: Input to arrives-at does not match schema: 

	   [{:departments {:department (not (queue? :neurology))}} nil nil]  

 {:type :schema.core/error, :schema [#schema.core.One{:schema {:departments {(enum :neurology :cardiology :pediatrics) (maybe (queue Str))}}, :optional? false, :name hospital} #schema.core.One{:schema (enum :neurology :cardiology :pediatrics), :optional? false, :name department} #schema.core.One{:schema java.lang.String, :optional? false, :name person}], :value [#schema.utils.ErrorContainer{:error {:departments {:department (not (queue? :neurology))}}} :cardiology "862T5"], :error [{:departments {:department (not (queue? :neurology))}} nil nil]} (logic.clj:60)
; expected:
(= expected-output (arrives-at hospital :cardiology person-to-arrive))

; 11 tests finished, problems found. 😭 errors: 10, failures: 0, ns: 1, vars: 1
clj꞉clojure-property-based-testing.logic-test꞉> 
; Evaluating file: logic_test.clj
#'clojure-property-based-testing.logic-test/arrives-at-test
clj꞉clojure-property-based-testing.logic-test꞉> 
Reloading all the things...
Reloaded: (clojure-property-based-testing.generators.person-generator clojure-property-based-testing.models clojure-property-based-testing.logic clojure-property-based-testing.logic-test clojure-property-based-testing.core)
:ok
; Running test: arrives-at-generated-schema-success-test…
; ERROR in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (logic.clj:60):
; error: clojure.lang.ExceptionInfo: Input to arrives-at does not match schema: 

	   [{:departments {:department (not (queue? :cardiology))}} nil nil]  

 {:type :schema.core/error, :schema [#schema.core.One{:schema {:departments {(enum :neurology :cardiology :pediatrics) (maybe (queue Str))}}, :optional? false, :name hospital} #schema.core.One{:schema (enum :neurology :cardiology :pediatrics), :optional? false, :name department} #schema.core.One{:schema java.lang.String, :optional? false, :name person}], :value [#schema.utils.ErrorContainer{:error {:departments {:department (not (queue? :cardiology))}}} :cardiology "Vbhrf"], :error [{:departments {:department (not (queue? :cardiology))}} nil nil]} (logic.clj:60)
; expected:
(= expected-output (arrives-at hospital :cardiology person-to-arrive))

; ERROR in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (logic.clj:60):
; error: clojure.lang.ExceptionInfo: Input to arrives-at does not match schema: 

	   [{:departments {:department (not (queue? :neurology))}} nil nil]  

 {:type :schema.core/error, :schema [#schema.core.One{:schema {:departments {(enum :neurology :cardiology :pediatrics) (maybe (queue Str))}}, :optional? false, :name hospital} #schema.core.One{:schema (enum :neurology :cardiology :pediatrics), :optional? false, :name department} #schema.core.One{:schema java.lang.String, :optional? false, :name person}], :value [#schema.utils.ErrorContainer{:error {:departments {:department (not (queue? :neurology))}}} :cardiology "U6xL"], :error [{:departments {:department (not (queue? :neurology))}} nil nil]} (logic.clj:60)
; expected:
(= expected-output (arrives-at hospital :cardiology person-to-arrive))

; ERROR in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (logic.clj:60):
; error: clojure.lang.ExceptionInfo: Input to arrives-at does not match schema: 

	   [{:departments {:department (not (queue? :neurology))}} nil nil]  

 {:type :schema.core/error, :schema [#schema.core.One{:schema {:departments {(enum :neurology :cardiology :pediatrics) (maybe (queue Str))}}, :optional? false, :name hospital} #schema.core.One{:schema (enum :neurology :cardiology :pediatrics), :optional? false, :name department} #schema.core.One{:schema java.lang.String, :optional? false, :name person}], :value [#schema.utils.ErrorContainer{:error {:departments {:department (not (queue? :neurology))}}} :cardiology "Wwv7"], :error [{:departments {:department (not (queue? :neurology))}} nil nil]} (logic.clj:60)
; expected:
(= expected-output (arrives-at hospital :cardiology person-to-arrive))

; ERROR in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (logic.clj:60):
; error: clojure.lang.ExceptionInfo: Input to arrives-at does not match schema: 

	   [{:departments {:department (not (queue? :pediatrics))}} nil nil]  

 {:type :schema.core/error, :schema [#schema.core.One{:schema {:departments {(enum :neurology :cardiology :pediatrics) (maybe (queue Str))}}, :optional? false, :name hospital} #schema.core.One{:schema (enum :neurology :cardiology :pediatrics), :optional? false, :name department} #schema.core.One{:schema java.lang.String, :optional? false, :name person}], :value [#schema.utils.ErrorContainer{:error {:departments {:department (not (queue? :pediatrics))}}} :cardiology "2YyP"], :error [{:departments {:department (not (queue? :pediatrics))}} nil nil]} (logic.clj:60)
; expected:
(= expected-output (arrives-at hospital :cardiology person-to-arrive))

; ERROR in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (logic.clj:60):
; error: clojure.lang.ExceptionInfo: Input to arrives-at does not match schema: 

	   [{:departments {:department (not (queue? :cardiology))}} nil nil]  

 {:type :schema.core/error, :schema [#schema.core.One{:schema {:departments {(enum :neurology :cardiology :pediatrics) (maybe (queue Str))}}, :optional? false, :name hospital} #schema.core.One{:schema (enum :neurology :cardiology :pediatrics), :optional? false, :name department} #schema.core.One{:schema java.lang.String, :optional? false, :name person}], :value [#schema.utils.ErrorContainer{:error {:departments {:department (not (queue? :cardiology))}}} :cardiology "4CZ7n"], :error [{:departments {:department (not (queue? :cardiology))}} nil nil]} (logic.clj:60)
; expected:
(= expected-output (arrives-at hospital :cardiology person-to-arrive))

; ERROR in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (logic.clj:60):
; error: clojure.lang.ExceptionInfo: Input to arrives-at does not match schema: 

	   [{:departments {:department (not (queue? :pediatrics))}} nil nil]  

 {:type :schema.core/error, :schema [#schema.core.One{:schema {:departments {(enum :neurology :cardiology :pediatrics) (maybe (queue Str))}}, :optional? false, :name hospital} #schema.core.One{:schema (enum :neurology :cardiology :pediatrics), :optional? false, :name department} #schema.core.One{:schema java.lang.String, :optional? false, :name person}], :value [#schema.utils.ErrorContainer{:error {:departments {:department (not (queue? :pediatrics))}}} :cardiology "2dc6"], :error [{:departments {:department (not (queue? :pediatrics))}} nil nil]} (logic.clj:60)
; expected:
(= expected-output (arrives-at hospital :cardiology person-to-arrive))

; ERROR in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (logic.clj:60):
; error: clojure.lang.ExceptionInfo: Input to arrives-at does not match schema: 

	   [{:departments {:department (not (queue? :pediatrics))}} nil nil]  

 {:type :schema.core/error, :schema [#schema.core.One{:schema {:departments {(enum :neurology :cardiology :pediatrics) (maybe (queue Str))}}, :optional? false, :name hospital} #schema.core.One{:schema (enum :neurology :cardiology :pediatrics), :optional? false, :name department} #schema.core.One{:schema java.lang.String, :optional? false, :name person}], :value [#schema.utils.ErrorContainer{:error {:departments {:department (not (queue? :pediatrics))}}} :cardiology "gXQf"], :error [{:departments {:department (not (queue? :pediatrics))}} nil nil]} (logic.clj:60)
; expected:
(= expected-output (arrives-at hospital :cardiology person-to-arrive))

; ERROR in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (logic.clj:60):
; error: clojure.lang.ExceptionInfo: Input to arrives-at does not match schema: 

	   [{:departments {:department (not (queue? :pediatrics))}} nil nil]  

 {:type :schema.core/error, :schema [#schema.core.One{:schema {:departments {(enum :neurology :cardiology :pediatrics) (maybe (queue Str))}}, :optional? false, :name hospital} #schema.core.One{:schema (enum :neurology :cardiology :pediatrics), :optional? false, :name department} #schema.core.One{:schema java.lang.String, :optional? false, :name person}], :value [#schema.utils.ErrorContainer{:error {:departments {:department (not (queue? :pediatrics))}}} :cardiology "fC5C"], :error [{:departments {:department (not (queue? :pediatrics))}} nil nil]} (logic.clj:60)
; expected:
(= expected-output (arrives-at hospital :cardiology person-to-arrive))

; ERROR in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (logic.clj:60):
; error: clojure.lang.ExceptionInfo: Input to arrives-at does not match schema: 

	   [{:departments {:department (not (queue? :cardiology))}} nil nil]  

 {:type :schema.core/error, :schema [#schema.core.One{:schema {:departments {(enum :neurology :cardiology :pediatrics) (maybe (queue Str))}}, :optional? false, :name hospital} #schema.core.One{:schema (enum :neurology :cardiology :pediatrics), :optional? false, :name department} #schema.core.One{:schema java.lang.String, :optional? false, :name person}], :value [#schema.utils.ErrorContainer{:error {:departments {:department (not (queue? :cardiology))}}} :cardiology "5stzD"], :error [{:departments {:department (not (queue? :cardiology))}} nil nil]} (logic.clj:60)
; expected:
(= expected-output (arrives-at hospital :cardiology person-to-arrive))

; ERROR in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (logic.clj:60):
; error: clojure.lang.ExceptionInfo: Input to arrives-at does not match schema: 

	   [{:departments {:department (not (queue? :neurology))}} nil nil]  

 {:type :schema.core/error, :schema [#schema.core.One{:schema {:departments {(enum :neurology :cardiology :pediatrics) (maybe (queue Str))}}, :optional? false, :name hospital} #schema.core.One{:schema (enum :neurology :cardiology :pediatrics), :optional? false, :name department} #schema.core.One{:schema java.lang.String, :optional? false, :name person}], :value [#schema.utils.ErrorContainer{:error {:departments {:department (not (queue? :neurology))}}} :cardiology "fhY"], :error [{:departments {:department (not (queue? :neurology))}} nil nil]} (logic.clj:60)
; expected:
(= expected-output (arrives-at hospital :cardiology person-to-arrive))

; 11 tests finished, problems found. 😭 errors: 10, failures: 0, ns: 1, vars: 1
clj꞉clojure-property-based-testing.logic-test꞉> 
; Evaluating file: logic_test.clj
#'clojure-property-based-testing.logic-test/arrives-at-test
clj꞉clojure-property-based-testing.logic-test꞉> 
; Running all project tests…
; Running test: fits-queue-test…
; 16 tests finished, all passing 👍, ns: 1, vars: 1
clj꞉clojure-property-based-testing.logic-test꞉> 
; ERROR in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (logic.clj:60):
; error: clojure.lang.ExceptionInfo: Input to arrives-at does not match schema: 

	   [{:departments {:department (not (queue? :pediatrics))}} nil nil]  

 {:type :schema.core/error, :schema [#schema.core.One{:schema {:departments {(enum :neurology :cardiology :pediatrics) (maybe (queue Str))}}, :optional? false, :name hospital} #schema.core.One{:schema (enum :neurology :cardiology :pediatrics), :optional? false, :name department} #schema.core.One{:schema java.lang.String, :optional? false, :name person}], :value [#schema.utils.ErrorContainer{:error {:departments {:department (not (queue? :pediatrics))}}} :cardiology "R2yF6"], :error [{:departments {:department (not (queue? :pediatrics))}} nil nil]} (logic.clj:60)
; expected:
(= expected-output (arrives-at hospital :cardiology person-to-arrive))

; ERROR in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (logic.clj:60):
; error: clojure.lang.ExceptionInfo: Input to arrives-at does not match schema: 

	   [{:departments {:department (not (queue? :neurology))}} nil nil]  

 {:type :schema.core/error, :schema [#schema.core.One{:schema {:departments {(enum :neurology :cardiology :pediatrics) (maybe (queue Str))}}, :optional? false, :name hospital} #schema.core.One{:schema (enum :neurology :cardiology :pediatrics), :optional? false, :name department} #schema.core.One{:schema java.lang.String, :optional? false, :name person}], :value [#schema.utils.ErrorContainer{:error {:departments {:department (not (queue? :neurology))}}} :cardiology "uTZm"], :error [{:departments {:department (not (queue? :neurology))}} nil nil]} (logic.clj:60)
; expected:
(= expected-output (arrives-at hospital :cardiology person-to-arrive))

; ERROR in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (logic.clj:60):
; error: clojure.lang.ExceptionInfo: Input to arrives-at does not match schema: 

	   [{:departments {:department (not (queue? :pediatrics))}} nil nil]  

 {:type :schema.core/error, :schema [#schema.core.One{:schema {:departments {(enum :neurology :cardiology :pediatrics) (maybe (queue Str))}}, :optional? false, :name hospital} #schema.core.One{:schema (enum :neurology :cardiology :pediatrics), :optional? false, :name department} #schema.core.One{:schema java.lang.String, :optional? false, :name person}], :value [#schema.utils.ErrorContainer{:error {:departments {:department (not (queue? :pediatrics))}}} :cardiology "YE53I"], :error [{:departments {:department (not (queue? :pediatrics))}} nil nil]} (logic.clj:60)
; expected:
(= expected-output (arrives-at hospital :cardiology person-to-arrive))

; ERROR in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (logic.clj:60):
; error: clojure.lang.ExceptionInfo: Input to arrives-at does not match schema: 

	   [{:departments {:department (not (queue? :pediatrics))}} nil nil]  

 {:type :schema.core/error, :schema [#schema.core.One{:schema {:departments {(enum :neurology :cardiology :pediatrics) (maybe (queue Str))}}, :optional? false, :name hospital} #schema.core.One{:schema (enum :neurology :cardiology :pediatrics), :optional? false, :name department} #schema.core.One{:schema java.lang.String, :optional? false, :name person}], :value [#schema.utils.ErrorContainer{:error {:departments {:department (not (queue? :pediatrics))}}} :cardiology "22d"], :error [{:departments {:department (not (queue? :pediatrics))}} nil nil]} (logic.clj:60)
; expected:
(= expected-output (arrives-at hospital :cardiology person-to-arrive))

; ERROR in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (logic.clj:60):
; error: clojure.lang.ExceptionInfo: Input to arrives-at does not match schema: 

	   [{:departments {:department (not (queue? :pediatrics))}} nil nil]  

 {:type :schema.core/error, :schema [#schema.core.One{:schema {:departments {(enum :neurology :cardiology :pediatrics) (maybe (queue Str))}}, :optional? false, :name hospital} #schema.core.One{:schema (enum :neurology :cardiology :pediatrics), :optional? false, :name department} #schema.core.One{:schema java.lang.String, :optional? false, :name person}], :value [#schema.utils.ErrorContainer{:error {:departments {:department (not (queue? :pediatrics))}}} :cardiology "PWS7"], :error [{:departments {:department (not (queue? :pediatrics))}} nil nil]} (logic.clj:60)
; expected:
(= expected-output (arrives-at hospital :cardiology person-to-arrive))

; ERROR in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (logic.clj:60):
; error: clojure.lang.ExceptionInfo: Input to arrives-at does not match schema: 

	   [{:departments {:department (not (queue? :neurology))}} nil nil]  

 {:type :schema.core/error, :schema [#schema.core.One{:schema {:departments {(enum :neurology :cardiology :pediatrics) (maybe (queue Str))}}, :optional? false, :name hospital} #schema.core.One{:schema (enum :neurology :cardiology :pediatrics), :optional? false, :name department} #schema.core.One{:schema java.lang.String, :optional? false, :name person}], :value [#schema.utils.ErrorContainer{:error {:departments {:department (not (queue? :neurology))}}} :cardiology "sz6"], :error [{:departments {:department (not (queue? :neurology))}} nil nil]} (logic.clj:60)
; expected:
(= expected-output (arrives-at hospital :cardiology person-to-arrive))

; ERROR in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (logic.clj:60):
; error: clojure.lang.ExceptionInfo: Input to arrives-at does not match schema: 

	   [{:departments {:department (not (queue? :neurology))}} nil nil]  

 {:type :schema.core/error, :schema [#schema.core.One{:schema {:departments {(enum :neurology :cardiology :pediatrics) (maybe (queue Str))}}, :optional? false, :name hospital} #schema.core.One{:schema (enum :neurology :cardiology :pediatrics), :optional? false, :name department} #schema.core.One{:schema java.lang.String, :optional? false, :name person}], :value [#schema.utils.ErrorContainer{:error {:departments {:department (not (queue? :neurology))}}} :cardiology "8Sj5X"], :error [{:departments {:department (not (queue? :neurology))}} nil nil]} (logic.clj:60)
; expected:
(= expected-output (arrives-at hospital :cardiology person-to-arrive))

; ERROR in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (logic.clj:60):
; error: clojure.lang.ExceptionInfo: Input to arrives-at does not match schema: 

	   [{:departments {:department (not (queue? :pediatrics))}} nil nil]  

 {:type :schema.core/error, :schema [#schema.core.One{:schema {:departments {(enum :neurology :cardiology :pediatrics) (maybe (queue Str))}}, :optional? false, :name hospital} #schema.core.One{:schema (enum :neurology :cardiology :pediatrics), :optional? false, :name department} #schema.core.One{:schema java.lang.String, :optional? false, :name person}], :value [#schema.utils.ErrorContainer{:error {:departments {:department (not (queue? :pediatrics))}}} :cardiology "6BPq"], :error [{:departments {:department (not (queue? :pediatrics))}} nil nil]} (logic.clj:60)
; expected:
(= expected-output (arrives-at hospital :cardiology person-to-arrive))

; ERROR in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (logic.clj:60):
; error: clojure.lang.ExceptionInfo: Input to arrives-at does not match schema: 

	   [{:departments {:department (not (queue? :neurology))}} nil nil]  

 {:type :schema.core/error, :schema [#schema.core.One{:schema {:departments {(enum :neurology :cardiology :pediatrics) (maybe (queue Str))}}, :optional? false, :name hospital} #schema.core.One{:schema (enum :neurology :cardiology :pediatrics), :optional? false, :name department} #schema.core.One{:schema java.lang.String, :optional? false, :name person}], :value [#schema.utils.ErrorContainer{:error {:departments {:department (not (queue? :neurology))}}} :cardiology "4Q4"], :error [{:departments {:department (not (queue? :neurology))}} nil nil]} (logic.clj:60)
; expected:
(= expected-output (arrives-at hospital :cardiology person-to-arrive))

; ERROR in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (logic.clj:60):
; error: clojure.lang.ExceptionInfo: Input to arrives-at does not match schema: 

	   [{:departments {:department (not (queue? :neurology))}} nil nil]  

 {:type :schema.core/error, :schema [#schema.core.One{:schema {:departments {(enum :neurology :cardiology :pediatrics) (maybe (queue Str))}}, :optional? false, :name hospital} #schema.core.One{:schema (enum :neurology :cardiology :pediatrics), :optional? false, :name department} #schema.core.One{:schema java.lang.String, :optional? false, :name person}], :value [#schema.utils.ErrorContainer{:error {:departments {:department (not (queue? :neurology))}}} :cardiology "01g"], :error [{:departments {:department (not (queue? :neurology))}} nil nil]} (logic.clj:60)
; expected:
(= expected-output (arrives-at hospital :cardiology person-to-arrive))

; 44 tests finished, problems found. 😭 errors: 10, failures: 0, ns: 1, vars: 4
clj꞉clojure-property-based-testing.logic-test꞉> 
; Evaluating file: logic_test.clj
#'clojure-property-based-testing.logic-test/arrives-at-test
clj꞉clojure-property-based-testing.logic-test꞉> 
Reloading all the things...
Reloaded: (clojure-property-based-testing.generators.person-generator clojure-property-based-testing.models clojure-property-based-testing.logic clojure-property-based-testing.logic-test clojure-property-based-testing.core)
:ok
; Running test: arrives-at-generated-schema-success-test…
; ERROR in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (logic.clj:60):
; error: clojure.lang.ExceptionInfo: Input to arrives-at does not match schema: 

	   [{:departments {:department (not (queue? :cardiology))}} nil nil]  

 {:type :schema.core/error, :schema [#schema.core.One{:schema {:departments {(enum :neurology :cardiology :pediatrics) (maybe (queue Str))}}, :optional? false, :name hospital} #schema.core.One{:schema (enum :neurology :cardiology :pediatrics), :optional? false, :name department} #schema.core.One{:schema java.lang.String, :optional? false, :name person}], :value [#schema.utils.ErrorContainer{:error {:departments {:department (not (queue? :cardiology))}}} :cardiology "2X8"], :error [{:departments {:department (not (queue? :cardiology))}} nil nil]} (logic.clj:60)
; expected:
(= expected-output (arrives-at hospital :cardiology person-to-arrive))

; ERROR in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (logic.clj:60):
; error: clojure.lang.ExceptionInfo: Input to arrives-at does not match schema: 

	   [{:departments {:department (not (queue? :pediatrics))}} nil nil]  

 {:type :schema.core/error, :schema [#schema.core.One{:schema {:departments {(enum :neurology :cardiology :pediatrics) (maybe (queue Str))}}, :optional? false, :name hospital} #schema.core.One{:schema (enum :neurology :cardiology :pediatrics), :optional? false, :name department} #schema.core.One{:schema java.lang.String, :optional? false, :name person}], :value [#schema.utils.ErrorContainer{:error {:departments {:department (not (queue? :pediatrics))}}} :cardiology "X86"], :error [{:departments {:department (not (queue? :pediatrics))}} nil nil]} (logic.clj:60)
; expected:
(= expected-output (arrives-at hospital :cardiology person-to-arrive))

; ERROR in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (logic.clj:60):
; error: clojure.lang.ExceptionInfo: Input to arrives-at does not match schema: 

	   [{:departments {:department (not (queue? :neurology))}} nil nil]  

 {:type :schema.core/error, :schema [#schema.core.One{:schema {:departments {(enum :neurology :cardiology :pediatrics) (maybe (queue Str))}}, :optional? false, :name hospital} #schema.core.One{:schema (enum :neurology :cardiology :pediatrics), :optional? false, :name department} #schema.core.One{:schema java.lang.String, :optional? false, :name person}], :value [#schema.utils.ErrorContainer{:error {:departments {:department (not (queue? :neurology))}}} :cardiology "T154"], :error [{:departments {:department (not (queue? :neurology))}} nil nil]} (logic.clj:60)
; expected:
(= expected-output (arrives-at hospital :cardiology person-to-arrive))

; ERROR in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (logic.clj:60):
; error: clojure.lang.ExceptionInfo: Input to arrives-at does not match schema: 

	   [{:departments {:department (not (queue? :cardiology))}} nil nil]  

 {:type :schema.core/error, :schema [#schema.core.One{:schema {:departments {(enum :neurology :cardiology :pediatrics) (maybe (queue Str))}}, :optional? false, :name hospital} #schema.core.One{:schema (enum :neurology :cardiology :pediatrics), :optional? false, :name department} #schema.core.One{:schema java.lang.String, :optional? false, :name person}], :value [#schema.utils.ErrorContainer{:error {:departments {:department (not (queue? :cardiology))}}} :cardiology "bun0r"], :error [{:departments {:department (not (queue? :cardiology))}} nil nil]} (logic.clj:60)
; expected:
(= expected-output (arrives-at hospital :cardiology person-to-arrive))

; ERROR in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (logic.clj:60):
; error: clojure.lang.ExceptionInfo: Input to arrives-at does not match schema: 

	   [{:departments {:department (not (queue? :cardiology))}} nil nil]  

 {:type :schema.core/error, :schema [#schema.core.One{:schema {:departments {(enum :neurology :cardiology :pediatrics) (maybe (queue Str))}}, :optional? false, :name hospital} #schema.core.One{:schema (enum :neurology :cardiology :pediatrics), :optional? false, :name department} #schema.core.One{:schema java.lang.String, :optional? false, :name person}], :value [#schema.utils.ErrorContainer{:error {:departments {:department (not (queue? :cardiology))}}} :cardiology "fga8"], :error [{:departments {:department (not (queue? :cardiology))}} nil nil]} (logic.clj:60)
; expected:
(= expected-output (arrives-at hospital :cardiology person-to-arrive))

; ERROR in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (logic.clj:60):
; error: clojure.lang.ExceptionInfo: Input to arrives-at does not match schema: 

	   [{:departments {:department (not (queue? :pediatrics))}} nil nil]  

 {:type :schema.core/error, :schema [#schema.core.One{:schema {:departments {(enum :neurology :cardiology :pediatrics) (maybe (queue Str))}}, :optional? false, :name hospital} #schema.core.One{:schema (enum :neurology :cardiology :pediatrics), :optional? false, :name department} #schema.core.One{:schema java.lang.String, :optional? false, :name person}], :value [#schema.utils.ErrorContainer{:error {:departments {:department (not (queue? :pediatrics))}}} :cardiology "Qqg"], :error [{:departments {:department (not (queue? :pediatrics))}} nil nil]} (logic.clj:60)
; expected:
(= expected-output (arrives-at hospital :cardiology person-to-arrive))

; ERROR in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (logic.clj:60):
; error: clojure.lang.ExceptionInfo: Input to arrives-at does not match schema: 

	   [{:departments {:department (not (queue? :pediatrics))}} nil nil]  

 {:type :schema.core/error, :schema [#schema.core.One{:schema {:departments {(enum :neurology :cardiology :pediatrics) (maybe (queue Str))}}, :optional? false, :name hospital} #schema.core.One{:schema (enum :neurology :cardiology :pediatrics), :optional? false, :name department} #schema.core.One{:schema java.lang.String, :optional? false, :name person}], :value [#schema.utils.ErrorContainer{:error {:departments {:department (not (queue? :pediatrics))}}} :cardiology "V96"], :error [{:departments {:department (not (queue? :pediatrics))}} nil nil]} (logic.clj:60)
; expected:
(= expected-output (arrives-at hospital :cardiology person-to-arrive))

; ERROR in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (logic.clj:60):
; error: clojure.lang.ExceptionInfo: Input to arrives-at does not match schema: 

	   [{:departments {:department (not (queue? :pediatrics))}} nil nil]  

 {:type :schema.core/error, :schema [#schema.core.One{:schema {:departments {(enum :neurology :cardiology :pediatrics) (maybe (queue Str))}}, :optional? false, :name hospital} #schema.core.One{:schema (enum :neurology :cardiology :pediatrics), :optional? false, :name department} #schema.core.One{:schema java.lang.String, :optional? false, :name person}], :value [#schema.utils.ErrorContainer{:error {:departments {:department (not (queue? :pediatrics))}}} :cardiology "nQlZt"], :error [{:departments {:department (not (queue? :pediatrics))}} nil nil]} (logic.clj:60)
; expected:
(= expected-output (arrives-at hospital :cardiology person-to-arrive))

; ERROR in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (logic.clj:60):
; error: clojure.lang.ExceptionInfo: Input to arrives-at does not match schema: 

	   [{:departments {:department (not (queue? :pediatrics))}} nil nil]  

 {:type :schema.core/error, :schema [#schema.core.One{:schema {:departments {(enum :neurology :cardiology :pediatrics) (maybe (queue Str))}}, :optional? false, :name hospital} #schema.core.One{:schema (enum :neurology :cardiology :pediatrics), :optional? false, :name department} #schema.core.One{:schema java.lang.String, :optional? false, :name person}], :value [#schema.utils.ErrorContainer{:error {:departments {:department (not (queue? :pediatrics))}}} :cardiology "z1M"], :error [{:departments {:department (not (queue? :pediatrics))}} nil nil]} (logic.clj:60)
; expected:
(= expected-output (arrives-at hospital :cardiology person-to-arrive))

; ERROR in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (logic.clj:60):
; error: clojure.lang.ExceptionInfo: Input to arrives-at does not match schema: 

	   [{:departments {:department (not (queue? :cardiology))}} nil nil]  

 {:type :schema.core/error, :schema [#schema.core.One{:schema {:departments {(enum :neurology :cardiology :pediatrics) (maybe (queue Str))}}, :optional? false, :name hospital} #schema.core.One{:schema (enum :neurology :cardiology :pediatrics), :optional? false, :name department} #schema.core.One{:schema java.lang.String, :optional? false, :name person}], :value [#schema.utils.ErrorContainer{:error {:departments {:department (not (queue? :cardiology))}}} :cardiology "553"], :error [{:departments {:department (not (queue? :cardiology))}} nil nil]} (logic.clj:60)
; expected:
(= expected-output (arrives-at hospital :cardiology person-to-arrive))

; 11 tests finished, problems found. 😭 errors: 10, failures: 0, ns: 1, vars: 1
clj꞉clojure-property-based-testing.logic-test꞉> 
; Evaluating file: logic_test.clj
#'clojure-property-based-testing.logic-test/arrives-at-test
clj꞉clojure-property-based-testing.logic-test꞉> 
Reloading all the things...
Reloaded: (clojure-property-based-testing.generators.person-generator clojure-property-based-testing.models clojure-property-based-testing.logic clojure-property-based-testing.logic-test clojure-property-based-testing.core)
:ok
; Running test: arrives-at-generated-schema-success-test…
; ERROR in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (logic.clj:60):
; error: clojure.lang.ExceptionInfo: Input to arrives-at does not match schema: 

	   [{:departments {:department (not (queue? :pediatrics))}} nil nil]  

 {:type :schema.core/error, :schema [#schema.core.One{:schema {:departments {(enum :neurology :cardiology :pediatrics) (maybe (queue Str))}}, :optional? false, :name hospital} #schema.core.One{:schema (enum :neurology :cardiology :pediatrics), :optional? false, :name department} #schema.core.One{:schema java.lang.String, :optional? false, :name person}], :value [#schema.utils.ErrorContainer{:error {:departments {:department (not (queue? :pediatrics))}}} :cardiology "7Ol4b"], :error [{:departments {:department (not (queue? :pediatrics))}} nil nil]} (logic.clj:60)
; expected:
(= expected-output (arrives-at hospital :cardiology person-to-arrive))

; ERROR in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (logic.clj:60):
; error: clojure.lang.ExceptionInfo: Input to arrives-at does not match schema: 

	   [{:departments {:department (not (queue? :pediatrics))}} nil nil]  

 {:type :schema.core/error, :schema [#schema.core.One{:schema {:departments {(enum :neurology :cardiology :pediatrics) (maybe (queue Str))}}, :optional? false, :name hospital} #schema.core.One{:schema (enum :neurology :cardiology :pediatrics), :optional? false, :name department} #schema.core.One{:schema java.lang.String, :optional? false, :name person}], :value [#schema.utils.ErrorContainer{:error {:departments {:department (not (queue? :pediatrics))}}} :cardiology "29i"], :error [{:departments {:department (not (queue? :pediatrics))}} nil nil]} (logic.clj:60)
; expected:
(= expected-output (arrives-at hospital :cardiology person-to-arrive))

; ERROR in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (logic.clj:60):
; error: clojure.lang.ExceptionInfo: Input to arrives-at does not match schema: 

	   [{:departments {:department (not (queue? :cardiology))}} nil nil]  

 {:type :schema.core/error, :schema [#schema.core.One{:schema {:departments {(enum :neurology :cardiology :pediatrics) (maybe (queue Str))}}, :optional? false, :name hospital} #schema.core.One{:schema (enum :neurology :cardiology :pediatrics), :optional? false, :name department} #schema.core.One{:schema java.lang.String, :optional? false, :name person}], :value [#schema.utils.ErrorContainer{:error {:departments {:department (not (queue? :cardiology))}}} :cardiology "Jj6v6"], :error [{:departments {:department (not (queue? :cardiology))}} nil nil]} (logic.clj:60)
; expected:
(= expected-output (arrives-at hospital :cardiology person-to-arrive))

; ERROR in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (logic.clj:60):
; error: clojure.lang.ExceptionInfo: Input to arrives-at does not match schema: 

	   [{:departments {:department (not (queue? :pediatrics))}} nil nil]  

 {:type :schema.core/error, :schema [#schema.core.One{:schema {:departments {(enum :neurology :cardiology :pediatrics) (maybe (queue Str))}}, :optional? false, :name hospital} #schema.core.One{:schema (enum :neurology :cardiology :pediatrics), :optional? false, :name department} #schema.core.One{:schema java.lang.String, :optional? false, :name person}], :value [#schema.utils.ErrorContainer{:error {:departments {:department (not (queue? :pediatrics))}}} :cardiology "SG0Xr"], :error [{:departments {:department (not (queue? :pediatrics))}} nil nil]} (logic.clj:60)
; expected:
(= expected-output (arrives-at hospital :cardiology person-to-arrive))

; ERROR in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (logic.clj:60):
; error: clojure.lang.ExceptionInfo: Input to arrives-at does not match schema: 

	   [{:departments {:department (not (queue? :neurology))}} nil nil]  

 {:type :schema.core/error, :schema [#schema.core.One{:schema {:departments {(enum :neurology :cardiology :pediatrics) (maybe (queue Str))}}, :optional? false, :name hospital} #schema.core.One{:schema (enum :neurology :cardiology :pediatrics), :optional? false, :name department} #schema.core.One{:schema java.lang.String, :optional? false, :name person}], :value [#schema.utils.ErrorContainer{:error {:departments {:department (not (queue? :neurology))}}} :cardiology "1330C"], :error [{:departments {:department (not (queue? :neurology))}} nil nil]} (logic.clj:60)
; expected:
(= expected-output (arrives-at hospital :cardiology person-to-arrive))

; ERROR in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (logic.clj:60):
; error: clojure.lang.ExceptionInfo: Input to arrives-at does not match schema: 

	   [{:departments {:department (not (queue? :neurology))}} nil nil]  

 {:type :schema.core/error, :schema [#schema.core.One{:schema {:departments {(enum :neurology :cardiology :pediatrics) (maybe (queue Str))}}, :optional? false, :name hospital} #schema.core.One{:schema (enum :neurology :cardiology :pediatrics), :optional? false, :name department} #schema.core.One{:schema java.lang.String, :optional? false, :name person}], :value [#schema.utils.ErrorContainer{:error {:departments {:department (not (queue? :neurology))}}} :cardiology "mLYt"], :error [{:departments {:department (not (queue? :neurology))}} nil nil]} (logic.clj:60)
; expected:
(= expected-output (arrives-at hospital :cardiology person-to-arrive))

; ERROR in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (logic.clj:60):
; error: clojure.lang.ExceptionInfo: Input to arrives-at does not match schema: 

	   [{:departments {:department (not (queue? :pediatrics))}} nil nil]  

 {:type :schema.core/error, :schema [#schema.core.One{:schema {:departments {(enum :neurology :cardiology :pediatrics) (maybe (queue Str))}}, :optional? false, :name hospital} #schema.core.One{:schema (enum :neurology :cardiology :pediatrics), :optional? false, :name department} #schema.core.One{:schema java.lang.String, :optional? false, :name person}], :value [#schema.utils.ErrorContainer{:error {:departments {:department (not (queue? :pediatrics))}}} :cardiology "8W12"], :error [{:departments {:department (not (queue? :pediatrics))}} nil nil]} (logic.clj:60)
; expected:
(= expected-output (arrives-at hospital :cardiology person-to-arrive))

; ERROR in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (logic.clj:60):
; error: clojure.lang.ExceptionInfo: Input to arrives-at does not match schema: 

	   [{:departments {:department (not (queue? :pediatrics))}} nil nil]  

 {:type :schema.core/error, :schema [#schema.core.One{:schema {:departments {(enum :neurology :cardiology :pediatrics) (maybe (queue Str))}}, :optional? false, :name hospital} #schema.core.One{:schema (enum :neurology :cardiology :pediatrics), :optional? false, :name department} #schema.core.One{:schema java.lang.String, :optional? false, :name person}], :value [#schema.utils.ErrorContainer{:error {:departments {:department (not (queue? :pediatrics))}}} :cardiology "rv5"], :error [{:departments {:department (not (queue? :pediatrics))}} nil nil]} (logic.clj:60)
; expected:
(= expected-output (arrives-at hospital :cardiology person-to-arrive))

; ERROR in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (logic.clj:60):
; error: clojure.lang.ExceptionInfo: Input to arrives-at does not match schema: 

	   [{:departments {:department (not (queue? :pediatrics))}} nil nil]  

 {:type :schema.core/error, :schema [#schema.core.One{:schema {:departments {(enum :neurology :cardiology :pediatrics) (maybe (queue Str))}}, :optional? false, :name hospital} #schema.core.One{:schema (enum :neurology :cardiology :pediatrics), :optional? false, :name department} #schema.core.One{:schema java.lang.String, :optional? false, :name person}], :value [#schema.utils.ErrorContainer{:error {:departments {:department (not (queue? :pediatrics))}}} :cardiology "2viA"], :error [{:departments {:department (not (queue? :pediatrics))}} nil nil]} (logic.clj:60)
; expected:
(= expected-output (arrives-at hospital :cardiology person-to-arrive))

; ERROR in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (logic.clj:60):
; error: clojure.lang.ExceptionInfo: Input to arrives-at does not match schema: 

	   [{:departments {:department (not (queue? :cardiology))}} nil nil]  

 {:type :schema.core/error, :schema [#schema.core.One{:schema {:departments {(enum :neurology :cardiology :pediatrics) (maybe (queue Str))}}, :optional? false, :name hospital} #schema.core.One{:schema (enum :neurology :cardiology :pediatrics), :optional? false, :name department} #schema.core.One{:schema java.lang.String, :optional? false, :name person}], :value [#schema.utils.ErrorContainer{:error {:departments {:department (not (queue? :cardiology))}}} :cardiology "xtf"], :error [{:departments {:department (not (queue? :cardiology))}} nil nil]} (logic.clj:60)
; expected:
(= expected-output (arrives-at hospital :cardiology person-to-arrive))

; 11 tests finished, problems found. 😭 errors: 10, failures: 0, ns: 1, vars: 1
clj꞉clojure-property-based-testing.logic-test꞉> 
; Evaluating file: logic_test.clj
#'clojure-property-based-testing.logic-test/arrives-at-test
clj꞉clojure-property-based-testing.logic-test꞉> 
Reloading all the things...
Reloaded: (clojure-property-based-testing.generators.person-generator clojure-property-based-testing.models clojure-property-based-testing.logic clojure-property-based-testing.logic-test clojure-property-based-testing.core)
:ok
; Running test: arrives-at-generated-schema-success-test…
; FAIL in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (logic_test.clj:68):
; expected:
{:departments {:neurology ("32vW" "172u")}}

; actual:
{:departments {:neurology ("32vW")}}

; diff:
- {:departments {:neurology <-("32vW" "172u")-<}}

+ {:departments {:neurology <-("32vW")-<}}

; FAIL in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (logic_test.clj:68):
; expected:
{:departments {:neurology ("172u")}}

; actual:
{:departments {:neurology ()}}

; diff:
- {:departments {:neurology <-("172u")-<}}

+ {:departments {:neurology <-()-<}}

; FAIL in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (logic_test.clj:68):
; expected:
{:departments {:neurology ("72u")}}

; actual:
{:departments {:neurology ()}}

; diff:
- {:departments {:neurology <-("72u")-<}}

+ {:departments {:neurology <-()-<}}

; FAIL in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (logic_test.clj:68):
; expected:
{:departments {:neurology ("12u")}}

; actual:
{:departments {:neurology ()}}

; diff:
- {:departments {:neurology <-("12u")-<}}

+ {:departments {:neurology <-()-<}}

; FAIL in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (logic_test.clj:68):
; expected:
{:departments {:neurology ("02u")}}

; actual:
{:departments {:neurology ()}}

; diff:
- {:departments {:neurology <-("02u")-<}}

+ {:departments {:neurology <-()-<}}

; FAIL in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (logic_test.clj:68):
; expected:
{:departments {:neurology ("01u")}}

; actual:
{:departments {:neurology ()}}

; diff:
- {:departments {:neurology <-("01u")-<}}

+ {:departments {:neurology <-()-<}}

; FAIL in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (logic_test.clj:68):
; expected:
{:departments {:neurology ("00u")}}

; actual:
{:departments {:neurology ()}}

; diff:
- {:departments {:neurology <-("00u")-<}}

+ {:departments {:neurology <-()-<}}

; FAIL in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (logic_test.clj:68):
; expected:
{:departments {:neurology ("007")}}

; actual:
{:departments {:neurology ()}}

; diff:
- {:departments {:neurology <-("007")-<}}

+ {:departments {:neurology <-()-<}}

; FAIL in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (logic_test.clj:68):
; expected:
{:departments {:neurology ("001")}}

; actual:
{:departments {:neurology ()}}

; diff:
- {:departments {:neurology <-("001")-<}}

+ {:departments {:neurology <-()-<}}

; FAIL in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (logic_test.clj:68):
; expected:
{:departments {:neurology ("000")}}

; actual:
{:departments {:neurology ()}}

; diff:
- {:departments {:neurology <-("000")-<}}

+ {:departments {:neurology <-()-<}}

; FAIL in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (logic_test.clj:60):
; expected:
{:result true}

; actual:
{:fail [["32vW"] :neurology "172u"],
 :failed-after-ms 3,
 :failing-size 1,
 :num-tests 2,
 :pass? false,
 :result false,
 :result-data nil,
 :seed 1749756468607,
 :shrunk
 {:depth 8,
  :pass? false,
  :result false,
  :result-data nil,
  :smallest [[] :neurology "000"],
  :time-shrinking-ms 10,
  :total-nodes-visited 9},
 :test-var "arrives-at-generated-schema-success-test"}

; 12 tests finished, problems found. 😭 errors: 0, failures: 11, ns: 1, vars: 1
clj꞉clojure-property-based-testing.logic-test꞉> 
; Evaluating file: logic_test.clj
#'clojure-property-based-testing.logic-test/arrives-at-test
clj꞉clojure-property-based-testing.logic-test꞉> 
Reloading all the things...
Reloaded: (clojure-property-based-testing.generators.person-generator clojure-property-based-testing.models clojure-property-based-testing.logic clojure-property-based-testing.logic-test clojure-property-based-testing.core)
:ok
; Running test: arrives-at-generated-schema-success-test…
; 11 tests finished, all passing 👍, ns: 1, vars: 1
clj꞉clojure-property-based-testing.logic-test꞉> 
Reloading all the things...
Reloaded: (clojure-property-based-testing.generators.person-generator clojure-property-based-testing.models clojure-property-based-testing.logic clojure-property-based-testing.logic-test clojure-property-based-testing.core)
:ok
; Running test: arrives-at-generated-schema-success-test…
; 11 tests finished, all passing 👍, ns: 1, vars: 1
clj꞉clojure-property-based-testing.logic-test꞉> 
; Evaluating file: logic_test.clj
#'clojure-property-based-testing.logic-test/arrives-at-test
clj꞉clojure-property-based-testing.logic-test꞉> 
; Evaluating file: logic_test.clj
#'clojure-property-based-testing.logic-test/arrives-at-test
clj꞉clojure-property-based-testing.logic-test꞉> 
Reloading all the things...
Reloaded: (clojure-property-based-testing.generators.person-generator clojure-property-based-testing.models clojure-property-based-testing.logic clojure-property-based-testing.logic-test clojure-property-based-testing.core)
:ok
; Running test: arrives-at-generated-schema-success-test…
; 11 tests finished, all passing 👍, ns: 1, vars: 1
clj꞉clojure-property-based-testing.logic-test꞉> 
; Evaluating file: models.clj
#'clojure-property-based-testing.models/Hospital
clj꞉clojure-property-based-testing.models꞉> 
; Evaluating file: models.clj
#'clojure-property-based-testing.models/Hospital
clj꞉clojure-property-based-testing.models꞉> 
; Evaluating file: models.clj
#'clojure-property-based-testing.models/Hospital
clj꞉clojure-property-based-testing.models꞉> 
; Evaluating file: logic_test.clj
#'clojure-property-based-testing.logic-test/arrives-at-test
clj꞉clojure-property-based-testing.logic-test꞉> 
Reloading all the things...
Reloaded: (clojure-property-based-testing.generators.person-generator clojure-property-based-testing.models clojure-property-based-testing.logic clojure-property-based-testing.logic-test clojure-property-based-testing.core)
:ok
; Running test: arrives-at-generated-schema-success-test…
; 11 tests finished, all passing 👍, ns: 1, vars: 1
clj꞉clojure-property-based-testing.logic-test꞉> 
; Evaluating file: logic_test.clj
#'clojure-property-based-testing.logic-test/arrives-at-test
clj꞉clojure-property-based-testing.logic-test꞉> 
; Running all project tests…
; Running test: arrives-at-generated-schema-success-test…
; 44 tests finished, all passing 👍, ns: 1, vars: 4
clj꞉clojure-property-based-testing.logic-test꞉> 
; 11 tests finished, all passing 👍, ns: 1, vars: 1
clj꞉clojure-property-based-testing.logic-test꞉> 
; Evaluating file: logic_test.clj
#'clojure-property-based-testing.logic-test/arrives-at-test
clj꞉clojure-property-based-testing.logic-test꞉> 
; Evaluating file: logic_test.clj
; 
; Syntax error compiling at (test/clojure_property_based_testing/logic_test.clj:65:16).
; Unable to resolve symbol: queue-as-vector in this context
; Evaluation of file logic_test.clj failed: class clojure.lang.Compiler$CompilerException
clj꞉clojure-property-based-testing.logic-test꞉> 
; Evaluating file: logic_test.clj
#'clojure-property-based-testing.logic-test/arrives-at-test
clj꞉clojure-property-based-testing.logic-test꞉> 
; Evaluating file: logic_test.clj
#'clojure-property-based-testing.logic-test/arrives-at-test
clj꞉clojure-property-based-testing.logic-test꞉> 
Reloading all the things...
Reloaded: (clojure-property-based-testing.generators.person-generator clojure-property-based-testing.models clojure-property-based-testing.logic clojure-property-based-testing.logic-test clojure-property-based-testing.core)
:ok
; Running test: arrives-at-generated-schema-success-test…
; ERROR in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (rose_tree.cljc:60):
; Uncaught exception, not in assertion
; error: java.lang.ClassCastException: class clojure.lang.PersistentQueue cannot be cast to class clojure.lang.IFn (clojure.lang.PersistentQueue and clojure.lang.IFn are in unnamed module of loader 'app') (rose_tree.cljc:60)
; 1 tests finished, problems found. 😭 errors: 1, failures: 0, ns: 1, vars: 1
clj꞉clojure-property-based-testing.logic-test꞉> 
; Evaluating file: logic_test.clj
#'clojure-property-based-testing.logic-test/arrives-at-test
clj꞉clojure-property-based-testing.logic-test꞉> 
Reloading all the things...
Reloaded: (clojure-property-based-testing.generators.person-generator clojure-property-based-testing.models clojure-property-based-testing.logic clojure-property-based-testing.logic-test clojure-property-based-testing.core)
:ok
; Running test: arrives-at-generated-schema-success-test…
; ERROR in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (rose_tree.cljc:60):
; Uncaught exception, not in assertion
; error: java.lang.ClassCastException: class clojure.lang.PersistentQueue cannot be cast to class clojure.lang.IFn (clojure.lang.PersistentQueue and clojure.lang.IFn are in unnamed module of loader 'app') (rose_tree.cljc:60)
; 1 tests finished, problems found. 😭 errors: 1, failures: 0, ns: 1, vars: 1
clj꞉clojure-property-based-testing.logic-test꞉> 
; Evaluating file: logic_test.clj
#'clojure-property-based-testing.logic-test/arrives-at-test
clj꞉clojure-property-based-testing.logic-test꞉> 
Reloading all the things...
Reloaded: (clojure-property-based-testing.generators.person-generator clojure-property-based-testing.models clojure-property-based-testing.logic clojure-property-based-testing.logic-test clojure-property-based-testing.core)
:ok
; Running test: arrives-at-generated-schema-success-test…
; ERROR in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (logic_test.clj:60):
; Uncaught exception, not in assertion
; error: java.lang.ClassCastException: class clojure.lang.PersistentQueue cannot be cast to class clojure.lang.IFn (clojure.lang.PersistentQueue and clojure.lang.IFn are in unnamed module of loader 'app') (logic_test.clj:60)
; 1 tests finished, problems found. 😭 errors: 1, failures: 0, ns: 1, vars: 1
clj꞉clojure-property-based-testing.logic-test꞉> 
; Evaluating file: logic_test.clj
#'clojure-property-based-testing.logic-test/arrives-at-test
clj꞉clojure-property-based-testing.logic-test꞉> 
; Evaluating file: logic_test.clj
#'clojure-property-based-testing.logic-test/arrives-at-test
clj꞉clojure-property-based-testing.logic-test꞉> 
; Evaluating file: logic_test.clj
#'clojure-property-based-testing.logic-test/arrives-at-test
clj꞉clojure-property-based-testing.logic-test꞉> 
Reloading all the things...
Reloaded: (clojure-property-based-testing.generators.person-generator clojure-property-based-testing.models clojure-property-based-testing.logic clojure-property-based-testing.logic-test clojure-property-based-testing.core)
:ok
; Running test: arrives-at-generated-schema-success-test…
; 11 tests finished, all passing 👍, ns: 1, vars: 1
clj꞉clojure-property-based-testing.logic-test꞉> 
Reloading all the things...
Reloaded: (clojure-property-based-testing.generators.person-generator clojure-property-based-testing.models clojure-property-based-testing.logic clojure-property-based-testing.logic-test clojure-property-based-testing.core)
:ok
; Running test: arrives-at-generated-schema-success-test…
; 11 tests finished, all passing 👍, ns: 1, vars: 1
clj꞉clojure-property-based-testing.logic-test꞉> 
; Evaluating file: logic_test.clj
#'clojure-property-based-testing.logic-test/arrives-at-test
clj꞉clojure-property-based-testing.logic-test꞉> 
; Evaluating file: logic_test.clj
#'clojure-property-based-testing.logic-test/arrives-at-test
clj꞉clojure-property-based-testing.logic-test꞉> 
; Evaluating file: logic_test.clj
#'clojure-property-based-testing.logic-test/arrives-at-test
clj꞉clojure-property-based-testing.logic-test꞉> 
; Evaluating file: logic_test.clj
#'clojure-property-based-testing.logic-test/arrives-at-test
clj꞉clojure-property-based-testing.logic-test꞉> 
Reloading all the things...
Reloaded: (clojure-property-based-testing.generators.person-generator clojure-property-based-testing.models clojure-property-based-testing.logic clojure-property-based-testing.logic-test clojure-property-based-testing.core)
:ok
; Running test: arrives-at-generated-schema-success-test…
; FAIL in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (logic_test.clj:70):
; expected:
"sv5"

; actual:
[:departments {:pediatrics ("sv5")}]

; FAIL in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (logic_test.clj:70):
; expected:
"Xf1"

; actual:
[:departments {:cardiology ("Xf1")}]

; FAIL in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (logic_test.clj:70):
; expected:
"N7l0H"

; actual:
[:departments {:neurology ("NR6To" "N7l0H")}]

; FAIL in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (logic_test.clj:70):
; expected:
"Y8O7I"

; actual:
[:departments {:neurology ("Vt4" "CrAKg" "Y8O7I")}]

; FAIL in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (logic_test.clj:70):
; expected:
"WBtMl"

; actual:
[:departments {:pediatrics ("YUq2b" "X9I2O" "vg7z" "whJO" "WBtMl")}]

; FAIL in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (logic_test.clj:70):
; expected:
"jyChn"

; actual:
[:departments {:neurology ("jyChn")}]

; FAIL in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (logic_test.clj:70):
; expected:
"p5YEx"

; actual:
[:departments {:neurology ("i6304" "p5YEx")}]

; FAIL in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (logic_test.clj:70):
; expected:
"dZN4"

; actual:
[:departments {:pediatrics ("B5J" "Bo61S" "dZN4")}]

; FAIL in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (logic_test.clj:70):
; expected:
"1B5a"

; actual:
[:departments {:cardiology ("1wv5k" "6AyVx" "1B5a")}]

; FAIL in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (logic_test.clj:70):
; expected:
"ftH"

; actual:
[:departments {:neurology ("XBJ" "OKI5D" "5412" "ftH")}]

; 21 tests finished, problems found. 😭 errors: 0, failures: 10, ns: 1, vars: 1
clj꞉clojure-property-based-testing.logic-test꞉> 
Reloading all the things...
Reloaded: (clojure-property-based-testing.generators.person-generator clojure-property-based-testing.models clojure-property-based-testing.logic clojure-property-based-testing.logic-test clojure-property-based-testing.core)
:ok
; Running test: arrives-at-generated-schema-success-test…
; FAIL in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (logic_test.clj:70):
; expected:
"BfA"

; actual:
[:departments {:cardiology ("2BJ" "Di4N" "2LH" "26Y6" "BfA")}]

; FAIL in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (logic_test.clj:70):
; expected:
"84gn"

; actual:
[:departments {:cardiology ("84gn")}]

; FAIL in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (logic_test.clj:70):
; expected:
"K7b3"

; actual:
[:departments {:pediatrics ("47Xd6" "K7b3")}]

; FAIL in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (logic_test.clj:70):
; expected:
"Bwn"

; actual:
[:departments {:neurology ("Bwn")}]

; FAIL in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (logic_test.clj:70):
; expected:
"P35"

; actual:
[:departments {:neurology ("2T2" "ljimi" "u796i" "P35")}]

; FAIL in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (logic_test.clj:70):
; expected:
"M98dS"

; actual:
[:departments {:neurology ("QDWR" "PYP" "t5iE1" "918g1" "M98dS")}]

; FAIL in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (logic_test.clj:70):
; expected:
"l90"

; actual:
[:departments {:pediatrics ("xP4n" "T2S" "igKi" "l90")}]

; FAIL in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (logic_test.clj:70):
; expected:
"0V459"

; actual:
[:departments {:pediatrics ("0V459")}]

; FAIL in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (logic_test.clj:70):
; expected:
"7In"

; actual:
[:departments {:neurology ("3864" "U4S" "T64" "7In")}]

; FAIL in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (logic_test.clj:70):
; expected:
"taE"

; actual:
[:departments {:neurology ("taE")}]

; 21 tests finished, problems found. 😭 errors: 0, failures: 10, ns: 1, vars: 1
clj꞉clojure-property-based-testing.logic-test꞉> 
; Evaluating file: logic_test.clj
#'clojure-property-based-testing.logic-test/arrives-at-test
clj꞉clojure-property-based-testing.logic-test꞉> 
Reloading all the things...
Reloaded: (clojure-property-based-testing.generators.person-generator clojure-property-based-testing.models clojure-property-based-testing.logic clojure-property-based-testing.logic-test clojure-property-based-testing.core)
:ok
; Running test: arrives-at-generated-schema-success-test…
; FAIL in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (logic_test.clj:70):
; expected:
"t951"

; actual:
nil

; FAIL in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (logic_test.clj:70):
; expected:
"3uU0"

; actual:
nil

; FAIL in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (logic_test.clj:70):
; expected:
"4Nud7"

; actual:
nil

; FAIL in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (logic_test.clj:70):
; expected:
"hm5a"

; actual:
nil

; FAIL in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (logic_test.clj:70):
; expected:
"WW5"

; actual:
nil

; FAIL in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (logic_test.clj:70):
; expected:
"AQI"

; actual:
nil

; FAIL in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (logic_test.clj:70):
; expected:
"83oBl"

; actual:
nil

; FAIL in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (logic_test.clj:70):
; expected:
"4xKzZ"

; actual:
nil

; FAIL in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (logic_test.clj:70):
; expected:
"8bY9"

; actual:
nil

; FAIL in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (logic_test.clj:70):
; expected:
"f9GS"

; actual:
nil

; 21 tests finished, problems found. 😭 errors: 0, failures: 10, ns: 1, vars: 1
clj꞉clojure-property-based-testing.logic-test꞉> 
; Evaluating file: logic_test.clj
#'clojure-property-based-testing.logic-test/arrives-at-test
clj꞉clojure-property-based-testing.logic-test꞉> 
; Evaluating file: logic_test.clj
#'clojure-property-based-testing.logic-test/arrives-at-test
clj꞉clojure-property-based-testing.logic-test꞉> 
; Evaluating file: logic_test.clj
#'clojure-property-based-testing.logic-test/arrives-at-test
clj꞉clojure-property-based-testing.logic-test꞉> 
Reloading all the things...
Reloaded: (clojure-property-based-testing.generators.person-generator clojure-property-based-testing.models clojure-property-based-testing.logic clojure-property-based-testing.logic-test clojure-property-based-testing.core)
:ok
; Running test: arrives-at-generated-schema-success-test…
; FAIL in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (logic_test.clj:70):
; expected:
"YMy5"

; actual:
nil

; FAIL in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (logic_test.clj:70):
; expected:
"KAytP"

; actual:
nil

; FAIL in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (logic_test.clj:70):
; expected:
"Zb39"

; actual:
nil

; FAIL in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (logic_test.clj:70):
; expected:
"0N7N"

; actual:
nil

; FAIL in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (logic_test.clj:70):
; expected:
"XwH"

; actual:
nil

; FAIL in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (logic_test.clj:70):
; expected:
"1ldKX"

; actual:
nil

; FAIL in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (logic_test.clj:70):
; expected:
"TNL"

; actual:
nil

; FAIL in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (logic_test.clj:70):
; expected:
"DMg7"

; actual:
nil

; FAIL in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (logic_test.clj:70):
; expected:
"dVs"

; actual:
nil

; FAIL in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (logic_test.clj:70):
; expected:
"7b7"

; actual:
nil

; 21 tests finished, problems found. 😭 errors: 0, failures: 10, ns: 1, vars: 1
clj꞉clojure-property-based-testing.logic-test꞉> 
; Evaluating file: logic_test.clj
; 
; Syntax error macroexpanding doseq at (test/clojure_property_based_testing/logic_test.clj:14:5).
; doseq requires an even number of forms in binding vector in clojure-property-based-testing.logic-test:14
; Evaluation of file logic_test.clj failed: class clojure.lang.Compiler$CompilerException
clj꞉clojure-property-based-testing.logic-test꞉> 
; Evaluating file: logic_test.clj
; 
; Syntax error macroexpanding doseq at (test/clojure_property_based_testing/logic_test.clj:14:5).
; doseq requires an even number of forms in binding vector in clojure-property-based-testing.logic-test:14
; Evaluation of file logic_test.clj failed: class clojure.lang.Compiler$CompilerException
clj꞉clojure-property-based-testing.logic-test꞉> 
; Evaluating file: logic_test.clj
; 
; Syntax error macroexpanding doseq at (test/clojure_property_based_testing/logic_test.clj:14:5).
; doseq requires an even number of forms in binding vector in clojure-property-based-testing.logic-test:14
; Evaluation of file logic_test.clj failed: class clojure.lang.Compiler$CompilerException
clj꞉clojure-property-based-testing.logic-test꞉> 
; Evaluating file: logic_test.clj
; 
; Syntax error macroexpanding doseq at (test/clojure_property_based_testing/logic_test.clj:14:5).
; doseq requires an even number of forms in binding vector in clojure-property-based-testing.logic-test:14
; Evaluation of file logic_test.clj failed: class clojure.lang.Compiler$CompilerException
clj꞉clojure-property-based-testing.logic-test꞉> 
; Evaluating file: logic_test.clj
#'clojure-property-based-testing.logic-test/arrives-at-test
clj꞉clojure-property-based-testing.logic-test꞉> 
; Evaluating file: logic_test.clj
#'clojure-property-based-testing.logic-test/arrives-at-test
clj꞉clojure-property-based-testing.logic-test꞉> 
Reloading all the things...
Reloaded: (clojure-property-based-testing.generators.person-generator clojure-property-based-testing.models clojure-property-based-testing.logic clojure-property-based-testing.logic-test clojure-property-based-testing.core)
:ok
; Running test: arrives-at-generated-schema-success-test…
; FAIL in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (logic_test.clj:70):
; expected:
"r83LT"

; actual:
nil

; FAIL in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (logic_test.clj:70):
; expected:
"r83LT"

; actual:
nil

; FAIL in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (logic_test.clj:70):
; expected:
"3LT"

; actual:
nil

; FAIL in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (logic_test.clj:70):
; expected:
"0LT"

; actual:
nil

; FAIL in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (logic_test.clj:70):
; expected:
"04T"

; actual:
nil

; FAIL in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (logic_test.clj:70):
; expected:
"01T"

; actual:
nil

; FAIL in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (logic_test.clj:70):
; expected:
"00T"

; actual:
nil

; FAIL in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (logic_test.clj:70):
; expected:
"007"

; actual:
nil

; FAIL in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (logic_test.clj:70):
; expected:
"001"

; actual:
nil

; FAIL in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (logic_test.clj:70):
; expected:
"000"

; actual:
nil

; FAIL in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (logic_test.clj:61):
; expected:
{:result true}

; actual:
{:fail [("tbkm" "Bm3" "8qxh" "G0VoV") :neurology "r83LT"],
 :failed-after-ms 2,
 :failing-size 0,
 :num-tests 1,
 :pass? false,
 :result false,
 :result-data nil,
 :seed 1749756909207,
 :shrunk
 {:depth 8,
  :pass? false,
  :result false,
  :result-data nil,
  :smallest [() :neurology "000"],
  :time-shrinking-ms 3,
  :total-nodes-visited 9},
 :test-var "arrives-at-generated-schema-success-test"}

; 21 tests finished, problems found. 😭 errors: 0, failures: 11, ns: 1, vars: 1
clj꞉clojure-property-based-testing.logic-test꞉> 
; Evaluating file: logic_test.clj
#'clojure-property-based-testing.logic-test/arrives-at-test
clj꞉clojure-property-based-testing.logic-test꞉> 
Reloading all the things...
Reloaded: (clojure-property-based-testing.generators.person-generator clojure-property-based-testing.models clojure-property-based-testing.logic clojure-property-based-testing.logic-test clojure-property-based-testing.core)
:ok
; Running test: arrives-at-generated-schema-success-test…
; FAIL in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (logic_test.clj:70):
; expected:
"681"

; actual:
{:cardiology ("fbx" "K5I7s" "sGnSD" "Q03" "681")}

; FAIL in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (logic_test.clj:70):
; expected:
"681"

; actual:
{:cardiology ("681")}

; FAIL in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (logic_test.clj:70):
; expected:
"681"

; actual:
{:neurology ("681")}

; FAIL in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (logic_test.clj:70):
; expected:
"081"

; actual:
{:neurology ("081")}

; FAIL in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (logic_test.clj:70):
; expected:
"011"

; actual:
{:neurology ("011")}

; FAIL in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (logic_test.clj:70):
; expected:
"001"

; actual:
{:neurology ("001")}

; FAIL in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (logic_test.clj:70):
; expected:
"000"

; actual:
{:neurology ("000")}

; FAIL in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (logic_test.clj:61):
; expected:
{:result true}

; actual:
{:fail [("fbx" "K5I7s" "sGnSD" "Q03") :cardiology "681"],
 :failed-after-ms 2,
 :failing-size 0,
 :num-tests 1,
 :pass? false,
 :result false,
 :result-data nil,
 :seed 1749756921068,
 :shrunk
 {:depth 5,
  :pass? false,
  :result false,
  :result-data nil,
  :smallest [() :neurology "000"],
  :time-shrinking-ms 2,
  :total-nodes-visited 6},
 :test-var "arrives-at-generated-schema-success-test"}

; 15 tests finished, problems found. 😭 errors: 0, failures: 8, ns: 1, vars: 1
clj꞉clojure-property-based-testing.logic-test꞉> 
; Evaluating file: logic_test.clj
#'clojure-property-based-testing.logic-test/arrives-at-test
clj꞉clojure-property-based-testing.logic-test꞉> 
Reloading all the things...
Reloaded: (clojure-property-based-testing.generators.person-generator clojure-property-based-testing.models clojure-property-based-testing.logic clojure-property-based-testing.logic-test clojure-property-based-testing.core)
:ok
; Running test: arrives-at-generated-schema-success-test…
; FAIL in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (logic_test.clj:70):
; expected:
"awt"

; actual:
nil

; FAIL in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (logic_test.clj:70):
; expected:
"awt"

; actual:
nil

; FAIL in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (logic_test.clj:70):
; expected:
"0wt"

; actual:
nil

; FAIL in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (logic_test.clj:70):
; expected:
"08t"

; actual:
nil

; FAIL in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (logic_test.clj:70):
; expected:
"01t"

; actual:
nil

; FAIL in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (logic_test.clj:70):
; expected:
"00t"

; actual:
nil

; FAIL in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (logic_test.clj:70):
; expected:
"007"

; actual:
nil

; FAIL in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (logic_test.clj:70):
; expected:
"001"

; actual:
nil

; FAIL in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (logic_test.clj:70):
; expected:
"000"

; actual:
nil

; FAIL in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (logic_test.clj:61):
; expected:
{:result true}

; actual:
{:fail [() :pediatrics "awt"],
 :failed-after-ms 0,
 :failing-size 0,
 :num-tests 1,
 :pass? false,
 :result false,
 :result-data nil,
 :seed 1749756942953,
 :shrunk
 {:depth 7,
  :pass? false,
  :result false,
  :result-data nil,
  :smallest [() :neurology "000"],
  :time-shrinking-ms 2,
  :total-nodes-visited 8},
 :test-var "arrives-at-generated-schema-success-test"}

; 19 tests finished, problems found. 😭 errors: 0, failures: 10, ns: 1, vars: 1
clj꞉clojure-property-based-testing.logic-test꞉> 
Reloading all the things...
Reloaded: (clojure-property-based-testing.generators.person-generator clojure-property-based-testing.models clojure-property-based-testing.logic clojure-property-based-testing.logic-test clojure-property-based-testing.core)
:ok
; Running test: arrives-at-generated-schema-success-test…
; FAIL in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (logic_test.clj:70):
; expected:
"83m"

; actual:
nil

; FAIL in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (logic_test.clj:70):
; expected:
"83m"

; actual:
nil

; FAIL in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (logic_test.clj:70):
; expected:
"83m"

; actual:
nil

; FAIL in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (logic_test.clj:70):
; expected:
"13m"

; actual:
nil

; FAIL in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (logic_test.clj:70):
; expected:
"03m"

; actual:
nil

; FAIL in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (logic_test.clj:70):
; expected:
"00m"

; actual:
nil

; FAIL in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (logic_test.clj:70):
; expected:
"004"

; actual:
nil

; FAIL in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (logic_test.clj:70):
; expected:
"001"

; actual:
nil

; FAIL in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (logic_test.clj:70):
; expected:
"000"

; actual:
nil

; FAIL in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (logic_test.clj:61):
; expected:
{:result true}

; actual:
{:fail [("Y8SJ" "6cY") :pediatrics "83m"],
 :failed-after-ms 1,
 :failing-size 0,
 :num-tests 1,
 :pass? false,
 :result false,
 :result-data nil,
 :seed 1749756950974,
 :shrunk
 {:depth 7,
  :pass? false,
  :result false,
  :result-data nil,
  :smallest [() :neurology "000"],
  :time-shrinking-ms 3,
  :total-nodes-visited 8},
 :test-var "arrives-at-generated-schema-success-test"}

; 19 tests finished, problems found. 😭 errors: 0, failures: 10, ns: 1, vars: 1
clj꞉clojure-property-based-testing.logic-test꞉> 
; Evaluating file: logic_test.clj
#'clojure-property-based-testing.logic-test/arrives-at-test
clj꞉clojure-property-based-testing.logic-test꞉> 
Reloading all the things...
Reloaded: (clojure-property-based-testing.generators.person-generator clojure-property-based-testing.models clojure-property-based-testing.logic clojure-property-based-testing.logic-test clojure-property-based-testing.core)
:ok
; Running test: arrives-at-generated-schema-success-test…
; FAIL in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (logic_test.clj:70):
; expected:
"N8a"

; actual:
("CTIy" "9BL54" "N8a")

; FAIL in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (logic_test.clj:70):
; expected:
"N8a"

; actual:
("N8a")

; FAIL in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (logic_test.clj:70):
; expected:
"N8a"

; actual:
("N8a")

; FAIL in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (logic_test.clj:70):
; expected:
"58a"

; actual:
("58a")

; FAIL in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (logic_test.clj:70):
; expected:
"28a"

; actual:
("28a")

; FAIL in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (logic_test.clj:70):
; expected:
"18a"

; actual:
("18a")

; FAIL in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (logic_test.clj:70):
; expected:
"08a"

; actual:
("08a")

; FAIL in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (logic_test.clj:70):
; expected:
"01a"

; actual:
("01a")

; FAIL in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (logic_test.clj:70):
; expected:
"00a"

; actual:
("00a")

; FAIL in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (logic_test.clj:70):
; expected:
"000"

; actual:
("000")

; FAIL in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (logic_test.clj:70):
; expected:
"00A"

; actual:
("00A")

; FAIL in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (logic_test.clj:70):
; expected:
"000"

; actual:
("000")

; FAIL in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (logic_test.clj:61):
; expected:
{:result true}

; actual:
{:fail [("CTIy" "9BL54") :pediatrics "N8a"],
 :failed-after-ms 1,
 :failing-size 0,
 :num-tests 1,
 :pass? false,
 :result false,
 :result-data nil,
 :seed 1749756954057,
 :shrunk
 {:depth 9,
  :pass? false,
  :result false,
  :result-data nil,
  :smallest [() :neurology "000"],
  :time-shrinking-ms 4,
  :total-nodes-visited 11},
 :test-var "arrives-at-generated-schema-success-test"}

; 25 tests finished, problems found. 😭 errors: 0, failures: 13, ns: 1, vars: 1
clj꞉clojure-property-based-testing.logic-test꞉> 
; Evaluating file: logic_test.clj
#'clojure-property-based-testing.logic-test/arrives-at-test
clj꞉clojure-property-based-testing.logic-test꞉> 
Reloading all the things...
Reloaded: (clojure-property-based-testing.generators.person-generator clojure-property-based-testing.models clojure-property-based-testing.logic clojure-property-based-testing.logic-test clojure-property-based-testing.core)
:ok
; Running test: arrives-at-generated-schema-success-test…
; 21 tests finished, all passing 👍, ns: 1, vars: 1
clj꞉clojure-property-based-testing.logic-test꞉> 
; Evaluating file: logic_test.clj
#'clojure-property-based-testing.logic-test/arrives-at-test
clj꞉clojure-property-based-testing.logic-test꞉> 
; Evaluating file: logic_test.clj
#'clojure-property-based-testing.logic-test/arrives-at-test
clj꞉clojure-property-based-testing.logic-test꞉> 
; Evaluating file: logic_test.clj
#'clojure-property-based-testing.logic-test/arrives-at-test
clj꞉clojure-property-based-testing.logic-test꞉> 
; Evaluating file: logic_test.clj
#'clojure-property-based-testing.logic-test/arrives-at-test
clj꞉clojure-property-based-testing.logic-test꞉> 
; Evaluating file: logic_test.clj
#'clojure-property-based-testing.logic-test/arrives-at-test
clj꞉clojure-property-based-testing.logic-test꞉> 
Reloading all the things...
Reloaded: (clojure-property-based-testing.generators.person-generator clojure-property-based-testing.models clojure-property-based-testing.logic clojure-property-based-testing.logic-test clojure-property-based-testing.core)
:ok
; Running test: arrives-at-generated-schema-success-test…
; 11 tests finished, all passing 👍, ns: 1, vars: 1
clj꞉clojure-property-based-testing.logic-test꞉> 
; Evaluating file: logic_test.clj
#'clojure-property-based-testing.logic-test/arrives-at-test
clj꞉clojure-property-based-testing.logic-test꞉> 
; Evaluating file: logic_test.clj
#'clojure-property-based-testing.logic-test/arrives-at-test
clj꞉clojure-property-based-testing.logic-test꞉> 
Reloading all the things...
Reloaded: (clojure-property-based-testing.generators.person-generator clojure-property-based-testing.models clojure-property-based-testing.logic clojure-property-based-testing.logic-test clojure-property-based-testing.core)
:ok
; Running test: arrives-at-generated-schema-success-test…
; 51 tests finished, all passing 👍, ns: 1, vars: 1
clj꞉clojure-property-based-testing.logic-test꞉> 
; Running all project tests…
; Running test: arrives-at-generated-schema-success-test…
; 84 tests finished, all passing 👍, ns: 1, vars: 4
clj꞉clojure-property-based-testing.logic-test꞉> 
; 51 tests finished, all passing 👍, ns: 1, vars: 1
clj꞉clojure-property-based-testing.logic-test꞉> 
; Evaluating file: logic_test.clj
#'clojure-property-based-testing.logic-test/arrives-at-test
clj꞉clojure-property-based-testing.logic-test꞉> 
; Evaluating file: logic_test.clj
#'clojure-property-based-testing.logic-test/arrives-at-test
clj꞉clojure-property-based-testing.logic-test꞉> 
; Evaluating file: logic_test.clj
#'clojure-property-based-testing.logic-test/arrives-at-test
clj꞉clojure-property-based-testing.logic-test꞉> 
; Evaluating file: logic_test.clj
#'clojure-property-based-testing.logic-test/arrives-at-test
clj꞉clojure-property-based-testing.logic-test꞉> 
; Evaluating file: logic_test.clj
#'clojure-property-based-testing.logic-test/arrives-at-test
clj꞉clojure-property-based-testing.logic-test꞉> 
; Evaluating file: logic_test.clj
#'clojure-property-based-testing.logic-test/arrives-at-test
clj꞉clojure-property-based-testing.logic-test꞉> 
; Evaluating file: logic_test.clj
#'clojure-property-based-testing.logic-test/arrives-at-test
clj꞉clojure-property-based-testing.logic-test꞉> 
; Evaluating file: logic_test.clj
#'clojure-property-based-testing.logic-test/arrives-at-test
clj꞉clojure-property-based-testing.logic-test꞉> 
; Evaluating file: logic_test.clj
#'clojure-property-based-testing.logic-test/arrives-at-test
clj꞉clojure-property-based-testing.logic-test꞉> 
; Evaluating file: logic_test.clj
#'clojure-property-based-testing.logic-test/arrives-at-test
clj꞉clojure-property-based-testing.logic-test꞉> 
Reloading all the things...
Reloaded: (clojure-property-based-testing.generators.person-generator clojure-property-based-testing.models clojure-property-based-testing.logic clojure-property-based-testing.logic-test clojure-property-based-testing.core)
:ok
; Running test: arrives-at-generated-schema-success-test…
; 101 tests finished, all passing 👍, ns: 1, vars: 1
clj꞉clojure-property-based-testing.logic-test꞉> 
; Evaluating file: logic_test.clj
#'clojure-property-based-testing.logic-test/arrives-at-test
clj꞉clojure-property-based-testing.logic-test꞉> 
; Evaluating file: logic_test.clj
#'clojure-property-based-testing.logic-test/arrives-at-test
clj꞉clojure-property-based-testing.logic-test꞉> 
Reloading all the things...
Reloaded: (clojure-property-based-testing.generators.person-generator clojure-property-based-testing.models clojure-property-based-testing.logic clojure-property-based-testing.logic-test clojure-property-based-testing.core)
:ok
; Running test: arrives-at-generated-schema-success-test…
; ERROR in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (RT.java:61):
; error: java.lang.IllegalArgumentException: contains? not supported on type: clojure.lang.PersistentQueue (RT.java:61)
; expected:
(contains? queue output-queue)

; ERROR in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (RT.java:61):
; error: java.lang.IllegalArgumentException: contains? not supported on type: clojure.lang.PersistentQueue (RT.java:61)
; expected:
(contains? queue output-queue)

; ERROR in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (RT.java:61):
; error: java.lang.IllegalArgumentException: contains? not supported on type: clojure.lang.PersistentQueue (RT.java:61)
; expected:
(contains? queue output-queue)

; ERROR in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (RT.java:61):
; error: java.lang.IllegalArgumentException: contains? not supported on type: clojure.lang.PersistentQueue (RT.java:61)
; expected:
(contains? queue output-queue)

; ERROR in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (RT.java:61):
; error: java.lang.IllegalArgumentException: contains? not supported on type: clojure.lang.PersistentQueue (RT.java:61)
; expected:
(contains? queue output-queue)

; ERROR in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (RT.java:61):
; error: java.lang.IllegalArgumentException: contains? not supported on type: clojure.lang.PersistentQueue (RT.java:61)
; expected:
(contains? queue output-queue)

; ERROR in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (RT.java:61):
; error: java.lang.IllegalArgumentException: contains? not supported on type: clojure.lang.PersistentQueue (RT.java:61)
; expected:
(contains? queue output-queue)

; ERROR in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (RT.java:61):
; error: java.lang.IllegalArgumentException: contains? not supported on type: clojure.lang.PersistentQueue (RT.java:61)
; expected:
(contains? queue output-queue)

; ERROR in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (RT.java:61):
; error: java.lang.IllegalArgumentException: contains? not supported on type: clojure.lang.PersistentQueue (RT.java:61)
; expected:
(contains? queue output-queue)

; ERROR in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (RT.java:61):
; error: java.lang.IllegalArgumentException: contains? not supported on type: clojure.lang.PersistentQueue (RT.java:61)
; expected:
(contains? queue output-queue)

; ERROR in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (RT.java:61):
; error: java.lang.IllegalArgumentException: contains? not supported on type: clojure.lang.PersistentQueue (RT.java:61)
; expected:
(contains? queue output-queue)

; ERROR in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (RT.java:61):
; error: java.lang.IllegalArgumentException: contains? not supported on type: clojure.lang.PersistentQueue (RT.java:61)
; expected:
(contains? queue output-queue)

; ERROR in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (RT.java:61):
; error: java.lang.IllegalArgumentException: contains? not supported on type: clojure.lang.PersistentQueue (RT.java:61)
; expected:
(contains? queue output-queue)

; ERROR in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (RT.java:61):
; error: java.lang.IllegalArgumentException: contains? not supported on type: clojure.lang.PersistentQueue (RT.java:61)
; expected:
(contains? queue output-queue)

; ERROR in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (RT.java:61):
; error: java.lang.IllegalArgumentException: contains? not supported on type: clojure.lang.PersistentQueue (RT.java:61)
; expected:
(contains? queue output-queue)

; ERROR in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (RT.java:61):
; error: java.lang.IllegalArgumentException: contains? not supported on type: clojure.lang.PersistentQueue (RT.java:61)
; expected:
(contains? queue output-queue)

; ERROR in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (RT.java:61):
; error: java.lang.IllegalArgumentException: contains? not supported on type: clojure.lang.PersistentQueue (RT.java:61)
; expected:
(contains? queue output-queue)

; ERROR in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (RT.java:61):
; error: java.lang.IllegalArgumentException: contains? not supported on type: clojure.lang.PersistentQueue (RT.java:61)
; expected:
(contains? queue output-queue)

; ERROR in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (RT.java:61):
; error: java.lang.IllegalArgumentException: contains? not supported on type: clojure.lang.PersistentQueue (RT.java:61)
; expected:
(contains? queue output-queue)

; ERROR in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (RT.java:61):
; error: java.lang.IllegalArgumentException: contains? not supported on type: clojure.lang.PersistentQueue (RT.java:61)
; expected:
(contains? queue output-queue)

; ERROR in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (RT.java:61):
; error: java.lang.IllegalArgumentException: contains? not supported on type: clojure.lang.PersistentQueue (RT.java:61)
; expected:
(contains? queue output-queue)

; ERROR in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (RT.java:61):
; error: java.lang.IllegalArgumentException: contains? not supported on type: clojure.lang.PersistentQueue (RT.java:61)
; expected:
(contains? queue output-queue)

; ERROR in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (RT.java:61):
; error: java.lang.IllegalArgumentException: contains? not supported on type: clojure.lang.PersistentQueue (RT.java:61)
; expected:
(contains? queue output-queue)

; ERROR in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (RT.java:61):
; error: java.lang.IllegalArgumentException: contains? not supported on type: clojure.lang.PersistentQueue (RT.java:61)
; expected:
(contains? queue output-queue)

; ERROR in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (RT.java:61):
; error: java.lang.IllegalArgumentException: contains? not supported on type: clojure.lang.PersistentQueue (RT.java:61)
; expected:
(contains? queue output-queue)

; ERROR in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (RT.java:61):
; error: java.lang.IllegalArgumentException: contains? not supported on type: clojure.lang.PersistentQueue (RT.java:61)
; expected:
(contains? queue output-queue)

; ERROR in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (RT.java:61):
; error: java.lang.IllegalArgumentException: contains? not supported on type: clojure.lang.PersistentQueue (RT.java:61)
; expected:
(contains? queue output-queue)

; ERROR in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (RT.java:61):
; error: java.lang.IllegalArgumentException: contains? not supported on type: clojure.lang.PersistentQueue (RT.java:61)
; expected:
(contains? queue output-queue)

; ERROR in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (RT.java:61):
; error: java.lang.IllegalArgumentException: contains? not supported on type: clojure.lang.PersistentQueue (RT.java:61)
; expected:
(contains? queue output-queue)

; ERROR in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (RT.java:61):
; error: java.lang.IllegalArgumentException: contains? not supported on type: clojure.lang.PersistentQueue (RT.java:61)
; expected:
(contains? queue output-queue)

; ERROR in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (RT.java:61):
; error: java.lang.IllegalArgumentException: contains? not supported on type: clojure.lang.PersistentQueue (RT.java:61)
; expected:
(contains? queue output-queue)

; ERROR in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (RT.java:61):
; error: java.lang.IllegalArgumentException: contains? not supported on type: clojure.lang.PersistentQueue (RT.java:61)
; expected:
(contains? queue output-queue)

; ERROR in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (RT.java:61):
; error: java.lang.IllegalArgumentException: contains? not supported on type: clojure.lang.PersistentQueue (RT.java:61)
; expected:
(contains? queue output-queue)

; ERROR in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (RT.java:61):
; error: java.lang.IllegalArgumentException: contains? not supported on type: clojure.lang.PersistentQueue (RT.java:61)
; expected:
(contains? queue output-queue)

; ERROR in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (RT.java:61):
; error: java.lang.IllegalArgumentException: contains? not supported on type: clojure.lang.PersistentQueue (RT.java:61)
; expected:
(contains? queue output-queue)

; ERROR in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (RT.java:61):
; error: java.lang.IllegalArgumentException: contains? not supported on type: clojure.lang.PersistentQueue (RT.java:61)
; expected:
(contains? queue output-queue)

; ERROR in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (RT.java:61):
; error: java.lang.IllegalArgumentException: contains? not supported on type: clojure.lang.PersistentQueue (RT.java:61)
; expected:
(contains? queue output-queue)

; ERROR in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (RT.java:61):
; error: java.lang.IllegalArgumentException: contains? not supported on type: clojure.lang.PersistentQueue (RT.java:61)
; expected:
(contains? queue output-queue)

; ERROR in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (RT.java:61):
; error: java.lang.IllegalArgumentException: contains? not supported on type: clojure.lang.PersistentQueue (RT.java:61)
; expected:
(contains? queue output-queue)

; ERROR in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (RT.java:61):
; error: java.lang.IllegalArgumentException: contains? not supported on type: clojure.lang.PersistentQueue (RT.java:61)
; expected:
(contains? queue output-queue)

; ERROR in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (RT.java:61):
; error: java.lang.IllegalArgumentException: contains? not supported on type: clojure.lang.PersistentQueue (RT.java:61)
; expected:
(contains? queue output-queue)

; ERROR in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (RT.java:61):
; error: java.lang.IllegalArgumentException: contains? not supported on type: clojure.lang.PersistentQueue (RT.java:61)
; expected:
(contains? queue output-queue)

; ERROR in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (RT.java:61):
; error: java.lang.IllegalArgumentException: contains? not supported on type: clojure.lang.PersistentQueue (RT.java:61)
; expected:
(contains? queue output-queue)

; ERROR in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (RT.java:61):
; error: java.lang.IllegalArgumentException: contains? not supported on type: clojure.lang.PersistentQueue (RT.java:61)
; expected:
(contains? queue output-queue)

; ERROR in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (RT.java:61):
; error: java.lang.IllegalArgumentException: contains? not supported on type: clojure.lang.PersistentQueue (RT.java:61)
; expected:
(contains? queue output-queue)

; ERROR in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (RT.java:61):
; error: java.lang.IllegalArgumentException: contains? not supported on type: clojure.lang.PersistentQueue (RT.java:61)
; expected:
(contains? queue output-queue)

; ERROR in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (RT.java:61):
; error: java.lang.IllegalArgumentException: contains? not supported on type: clojure.lang.PersistentQueue (RT.java:61)
; expected:
(contains? queue output-queue)

; ERROR in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (RT.java:61):
; error: java.lang.IllegalArgumentException: contains? not supported on type: clojure.lang.PersistentQueue (RT.java:61)
; expected:
(contains? queue output-queue)

; ERROR in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (RT.java:61):
; error: java.lang.IllegalArgumentException: contains? not supported on type: clojure.lang.PersistentQueue (RT.java:61)
; expected:
(contains? queue output-queue)

; ERROR in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (RT.java:61):
; error: java.lang.IllegalArgumentException: contains? not supported on type: clojure.lang.PersistentQueue (RT.java:61)
; expected:
(contains? queue output-queue)

; 151 tests finished, problems found. 😭 errors: 50, failures: 0, ns: 1, vars: 1
clj꞉clojure-property-based-testing.logic-test꞉> 
; Evaluating file: logic_test.clj
#'clojure-property-based-testing.logic-test/arrives-at-test
clj꞉clojure-property-based-testing.logic-test꞉> 
; Evaluating file: logic_test.clj
#'clojure-property-based-testing.logic-test/arrives-at-test
clj꞉clojure-property-based-testing.logic-test꞉> 
Reloading all the things...
Reloaded: (clojure-property-based-testing.generators.person-generator clojure-property-based-testing.models clojure-property-based-testing.logic clojure-property-based-testing.logic-test clojure-property-based-testing.core)
:ok
; Running test: arrives-at-generated-schema-success-test…
; FAIL in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (logic_test.clj:71):
; expected:
(contains? (vec queue) (vec output-queue))

; actual:
(not (contains? [] ["9j6"]))

; FAIL in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (logic_test.clj:71):
; expected:
(contains? (vec queue) (vec output-queue))

; actual:
(not (contains? [] ["9j6"]))

; FAIL in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (logic_test.clj:71):
; expected:
(contains? (vec queue) (vec output-queue))

; actual:
(not (contains? [] ["2j6"]))

; FAIL in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (logic_test.clj:71):
; expected:
(contains? (vec queue) (vec output-queue))

; actual:
(not (contains? [] ["1j6"]))

; FAIL in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (logic_test.clj:71):
; expected:
(contains? (vec queue) (vec output-queue))

; actual:
(not (contains? [] ["0j6"]))

; FAIL in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (logic_test.clj:71):
; expected:
(contains? (vec queue) (vec output-queue))

; actual:
(not (contains? [] ["036"]))

; FAIL in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (logic_test.clj:71):
; expected:
(contains? (vec queue) (vec output-queue))

; actual:
(not (contains? [] ["006"]))

; FAIL in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (logic_test.clj:71):
; expected:
(contains? (vec queue) (vec output-queue))

; actual:
(not (contains? [] ["000"]))

; FAIL in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (logic_test.clj:71):
; expected:
(contains? (vec queue) (vec output-queue))

; actual:
(not (contains? [] ["003"]))

; FAIL in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (logic_test.clj:71):
; expected:
(contains? (vec queue) (vec output-queue))

; actual:
(not (contains? [] ["000"]))

; FAIL in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (logic_test.clj:71):
; expected:
(contains? (vec queue) (vec output-queue))

; actual:
(not (contains? [] ["002"]))

; FAIL in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (logic_test.clj:71):
; expected:
(contains? (vec queue) (vec output-queue))

; actual:
(not (contains? [] ["001"]))

; FAIL in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (logic_test.clj:71):
; expected:
(contains? (vec queue) (vec output-queue))

; actual:
(not (contains? [] ["000"]))

; FAIL in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (logic_test.clj:61):
; expected:
{:result true}

; actual:
{:fail [() :cardiology "9j6"],
 :failed-after-ms 1,
 :failing-size 0,
 :num-tests 1,
 :pass? false,
 :result false,
 :result-data nil,
 :seed 1749757189301,
 :shrunk
 {:depth 9,
  :pass? false,
  :result false,
  :result-data nil,
  :smallest [() :neurology "000"],
  :time-shrinking-ms 7,
  :total-nodes-visited 12},
 :test-var "arrives-at-generated-schema-success-test"}

; 40 tests finished, problems found. 😭 errors: 0, failures: 14, ns: 1, vars: 1
clj꞉clojure-property-based-testing.logic-test꞉> 
(subset? [] ["0000"])
; Syntax error compiling at (.calva/output-window/output.calva-repl:3208:1).
; Unable to resolve symbol: subset? in this context
clj꞉clojure-property-based-testing.logic-test꞉> 
(contains? [] ["0000"])
false
clj꞉clojure-property-based-testing.logic-test꞉> 
(contains? ["0000"] [] )
false
clj꞉clojure-property-based-testing.logic-test꞉> 
; Evaluating file: logic_test.clj
; 
; Syntax error compiling at (test/clojure_property_based_testing/logic_test.clj:71:10).
; No such namespace: set
; Evaluation of file logic_test.clj failed: class clojure.lang.Compiler$CompilerException
clj꞉clojure-property-based-testing.logic-test꞉> 
; Evaluating file: logic_test.clj
; 
; Syntax error compiling at (test/clojure_property_based_testing/logic_test.clj:71:10).
; No such namespace: set
; Evaluation of file logic_test.clj failed: class clojure.lang.Compiler$CompilerException
clj꞉clojure-property-based-testing.logic-test꞉> 
Reloading all the things...
Error reloading: clojure-property-based-testing.logic-test
Syntax error compiling at (clojure_property_based_testing/logic_test.clj:71:10).
No such namespace: set

:error 😿
; Running test: arrives-at-generated-schema-success-test…
; No tests found. 😱, ns: 0, vars: 0
clj꞉clojure-property-based-testing.logic-test꞉> 
; Evaluating file: logic_test.clj
#'clojure-property-based-testing.logic-test/arrives-at-test
clj꞉clojure-property-based-testing.logic-test꞉> 
Reloading all the things...
Reloaded: (clojure-property-based-testing.generators.person-generator clojure-property-based-testing.models clojure-property-based-testing.logic clojure-property-based-testing.logic-test clojure-property-based-testing.core)
:ok
; Running test: arrives-at-generated-schema-success-test…
; 151 tests finished, all passing 👍, ns: 1, vars: 1
clj꞉clojure-property-based-testing.logic-test꞉> 
; Evaluating file: logic_test.clj
#'clojure-property-based-testing.logic-test/arrives-at-test
clj꞉clojure-property-based-testing.logic-test꞉> 
; Evaluating file: logic_test.clj
#'clojure-property-based-testing.logic-test/arrives-at-test
clj꞉clojure-property-based-testing.logic-test꞉> 
; Evaluating file: logic_test.clj
#'clojure-property-based-testing.logic-test/arrives-at-test
clj꞉clojure-property-based-testing.logic-test꞉> 
; Evaluating file: logic_test.clj
; 
; Syntax error reading source at (test/clojure_property_based_testing/logic_test.clj:104:1).
; EOF while reading, starting at line 62
; Evaluation of file logic_test.clj failed: class clojure.lang.Compiler$CompilerException
clj꞉clojure-property-based-testing.logic-test꞉> 
Reloading all the things...
Error reloading: clojure-property-based-testing.logic-test
Syntax error reading source at (clojure_property_based_testing/logic_test.clj:104:1).
EOF while reading, starting at line 62

:error 😿
; No test found at cursor
clj꞉clojure-property-based-testing.logic-test꞉> 
; Evaluating file: logic_test.clj
; 
; Syntax error reading source at (test/clojure_property_based_testing/logic_test.clj:104:1).
; EOF while reading, starting at line 62
; Evaluation of file logic_test.clj failed: class clojure.lang.Compiler$CompilerException
clj꞉clojure-property-based-testing.logic-test꞉> 
; Evaluating file: logic_test.clj
#'clojure-property-based-testing.logic-test/arrives-at-test
clj꞉clojure-property-based-testing.logic-test꞉> 
Reloading all the things...
Reloaded: (clojure-property-based-testing.generators.person-generator clojure-property-based-testing.models clojure-property-based-testing.logic clojure-property-based-testing.logic-test clojure-property-based-testing.core)
:ok
; Running test: arrives-at-generated-schema-success-test…
; FAIL in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (logic_test.clj:72):
; expected:
[]

; actual:
nil

; FAIL in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (logic_test.clj:72):
; expected:
[]

; actual:
nil

; FAIL in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (logic_test.clj:72):
; expected:
[]

; actual:
nil

; FAIL in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (logic_test.clj:72):
; expected:
[]

; actual:
nil

; FAIL in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (logic_test.clj:72):
; expected:
[]

; actual:
nil

; FAIL in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (logic_test.clj:72):
; expected:
[]

; actual:
nil

; FAIL in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (logic_test.clj:72):
; expected:
[]

; actual:
nil

; FAIL in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (logic_test.clj:72):
; expected:
[]

; actual:
nil

; FAIL in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (logic_test.clj:72):
; expected:
[]

; actual:
nil

; FAIL in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (logic_test.clj:72):
; expected:
[]

; actual:
nil

; FAIL in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (logic_test.clj:72):
; expected:
[]

; actual:
nil

; FAIL in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (logic_test.clj:62):
; expected:
{:result true}

; actual:
{:fail [() :pediatrics "08V5"],
 :failed-after-ms 2,
 :failing-size 1,
 :num-tests 2,
 :pass? false,
 :result false,
 :result-data nil,
 :seed 1749757352955,
 :shrunk
 {:depth 9,
  :pass? false,
  :result false,
  :result-data nil,
  :smallest [() :neurology "000"],
  :time-shrinking-ms 4,
  :total-nodes-visited 10},
 :test-var "arrives-at-generated-schema-success-test"}

; 37 tests finished, problems found. 😭 errors: 0, failures: 12, ns: 1, vars: 1
clj꞉clojure-property-based-testing.logic-test꞉> 
; Evaluating file: logic_test.clj
#'clojure-property-based-testing.logic-test/arrives-at-test
clj꞉clojure-property-based-testing.logic-test꞉> 
Reloading all the things...
Reloaded: (clojure-property-based-testing.generators.person-generator clojure-property-based-testing.models clojure-property-based-testing.logic clojure-property-based-testing.logic-test clojure-property-based-testing.core)
:ok
; Running test: arrives-at-test…
; 6 tests finished, all passing 👍, ns: 1, vars: 1
clj꞉clojure-property-based-testing.logic-test꞉> 
; Evaluating file: logic_test.clj
#'clojure-property-based-testing.logic-test/arrives-at-test
clj꞉clojure-property-based-testing.logic-test꞉> 
; Evaluating file: logic_test.clj
#'clojure-property-based-testing.logic-test/arrives-at-test
clj꞉clojure-property-based-testing.logic-test꞉> 
Reloading all the things...
Reloaded: (clojure-property-based-testing.generators.person-generator clojure-property-based-testing.models clojure-property-based-testing.logic clojure-property-based-testing.logic-test clojure-property-based-testing.core)
:ok
; Running test: arrives-at-generated-schema-success-test…
; 151 tests finished, all passing 👍, ns: 1, vars: 1
clj꞉clojure-property-based-testing.logic-test꞉> 
; Evaluating file: logic_test.clj
#'clojure-property-based-testing.logic-test/arrives-at-test
clj꞉clojure-property-based-testing.logic-test꞉> 
; Evaluating file: logic_test.clj
#'clojure-property-based-testing.logic-test/arrives-at-test
clj꞉clojure-property-based-testing.logic-test꞉> 
Reloading all the things...
Reloaded: (clojure-property-based-testing.generators.person-generator clojure-property-based-testing.models clojure-property-based-testing.logic clojure-property-based-testing.logic-test clojure-property-based-testing.core)
:ok
; Running test: arrives-at-generated-schema-success-test…
; 151 tests finished, all passing 👍, ns: 1, vars: 1
clj꞉clojure-property-based-testing.logic-test꞉> 
; Evaluating file: logic_test.clj
#'clojure-property-based-testing.logic-test/arrives-at-test
clj꞉clojure-property-based-testing.logic-test꞉> 
; Evaluating file: logic_test.clj
#'clojure-property-based-testing.logic-test/arrives-at-test
clj꞉clojure-property-based-testing.logic-test꞉> 
; Evaluating file: logic_test.clj
#'clojure-property-based-testing.logic-test/arrives-at-test
clj꞉clojure-property-based-testing.logic-test꞉> 
; Evaluating file: logic_test.clj
#'clojure-property-based-testing.logic-test/arrives-at-test
clj꞉clojure-property-based-testing.logic-test꞉> 
(gen/elements [:aaa :bbb])
#clojure.test.check.generators.Generator{:gen #function[clojure.test.check.generators/gen-fmap/fn--5910]}
clj꞉clojure-property-based-testing.logic-test꞉> 
(gen/sample (gen/elements [:aaa :bbb]))
(:bbb :bbb :bbb :aaa :aaa :aaa :aaa :aaa :aaa :aaa)
clj꞉clojure-property-based-testing.logic-test꞉> 
; Evaluating file: logic_test.clj
#'clojure-property-based-testing.logic-test/arrives-at-test
clj꞉clojure-property-based-testing.logic-test꞉> 
; Evaluating file: logic_test.clj
#'clojure-property-based-testing.logic-test/arrives-at-test
clj꞉clojure-property-based-testing.logic-test꞉> 
; Evaluating file: logic_test.clj
#'clojure-property-based-testing.logic-test/arrives-at-test
clj꞉clojure-property-based-testing.logic-test꞉> 
; Evaluating file: logic_test.clj
#'clojure-property-based-testing.logic-test/arrives-at-test
clj꞉clojure-property-based-testing.logic-test꞉> 
; Evaluating file: logic_test.clj
#'clojure-property-based-testing.logic-test/arrives-at-test
clj꞉clojure-property-based-testing.logic-test꞉> 
; Running all project tests…
; Running test: arrives-at-generated-schema-success-test…
; 151 tests finished, all passing 👍, ns: 1, vars: 1
clj꞉clojure-property-based-testing.logic-test꞉> 
; ERROR in clojure-property-based-testing.logic-test/arrives-at-test (logic.clj:80):
; It should be able to insert a new person in the queue if is not empty
; error: clojure.lang.ExceptionInfo: Input to arrives-at does not match schema: 

	   [nil (named (not (#{:neurology :cardiology :pediatrics} :cardiologry)) department) nil]  

 {:type :schema.core/error, :schema [#schema.core.One{:schema {:departments {(enum :neurology :cardiology :pediatrics) (maybe (queue Str))}}, :optional? false, :name hospital} #schema.core.One{:schema (enum :neurology :cardiology :pediatrics), :optional? false, :name department} #schema.core.One{:schema java.lang.String, :optional? false, :name person}], :value [{:departments {:cardiology #object[clojure.lang.PersistentQueue 0x32cfffb2 "clojure.lang.PersistentQueue@9e2"]}} :cardiologry "5"], :error [nil (named (not (#{:neurology :cardiology :pediatrics} :cardiologry)) department) nil]} (logic.clj:80)
; expected:
(=
 {:departments {:cardiology (into m/Empty-Queue ["1" "2" "5"])}}
 (arrives-at
  {:departments {:cardiology (into m/Empty-Queue ["1" "2"])}}
  :cardiologry
  "5"))

; ERROR in clojure-property-based-testing.logic-test/arrives-at-test (logic.clj:80):
; It should be able to insert a new person in the queue if is not empty
; error: clojure.lang.ExceptionInfo: Input to arrives-at does not match schema: 

	   [nil (named (not (#{:neurology :cardiology :pediatrics} :cardiologry)) department) nil]  

 {:type :schema.core/error, :schema [#schema.core.One{:schema {:departments {(enum :neurology :cardiology :pediatrics) (maybe (queue Str))}}, :optional? false, :name hospital} #schema.core.One{:schema (enum :neurology :cardiology :pediatrics), :optional? false, :name department} #schema.core.One{:schema java.lang.String, :optional? false, :name person}], :value [{:departments {:cardiology #object[clojure.lang.PersistentQueue 0x1bfda22 "clojure.lang.PersistentQueue@50"]}} :cardiologry "2"], :error [nil (named (not (#{:neurology :cardiology :pediatrics} :cardiologry)) department) nil]} (logic.clj:80)
; expected:
(=
 {:departments {:cardiology (into m/Empty-Queue ["1" "2"])}}
 (arrives-at
  {:departments {:cardiology (into m/Empty-Queue ["1"])}}
  :cardiologry
  "2"))

; 184 tests finished, problems found. 😭 errors: 2, failures: 0, ns: 1, vars: 4
clj꞉clojure-property-based-testing.logic-test꞉> 
; Running all project tests…
; Running test: arrives-at-generated-schema-success-test…
; 151 tests finished, all passing 👍, ns: 1, vars: 1
clj꞉clojure-property-based-testing.logic-test꞉> 
; ERROR in clojure-property-based-testing.logic-test/arrives-at-test (logic.clj:80):
; It should be able to insert a new person in the queue if is not empty
; error: clojure.lang.ExceptionInfo: Input to arrives-at does not match schema: 

	   [nil (named (not (#{:neurology :cardiology :pediatrics} :cardiologry)) department) nil]  

 {:type :schema.core/error, :schema [#schema.core.One{:schema {:departments {(enum :neurology :cardiology :pediatrics) (maybe (queue Str))}}, :optional? false, :name hospital} #schema.core.One{:schema (enum :neurology :cardiology :pediatrics), :optional? false, :name department} #schema.core.One{:schema java.lang.String, :optional? false, :name person}], :value [{:departments {:cardiology #object[clojure.lang.PersistentQueue 0x5c9c1702 "clojure.lang.PersistentQueue@9e2"]}} :cardiologry "5"], :error [nil (named (not (#{:neurology :cardiology :pediatrics} :cardiologry)) department) nil]} (logic.clj:80)
; expected:
(=
 {:departments {:cardiology (into m/Empty-Queue ["1" "2" "5"])}}
 (arrives-at
  {:departments {:cardiology (into m/Empty-Queue ["1" "2"])}}
  :cardiologry
  "5"))

; ERROR in clojure-property-based-testing.logic-test/arrives-at-test (logic.clj:80):
; It should be able to insert a new person in the queue if is not empty
; error: clojure.lang.ExceptionInfo: Input to arrives-at does not match schema: 

	   [nil (named (not (#{:neurology :cardiology :pediatrics} :cardiologry)) department) nil]  

 {:type :schema.core/error, :schema [#schema.core.One{:schema {:departments {(enum :neurology :cardiology :pediatrics) (maybe (queue Str))}}, :optional? false, :name hospital} #schema.core.One{:schema (enum :neurology :cardiology :pediatrics), :optional? false, :name department} #schema.core.One{:schema java.lang.String, :optional? false, :name person}], :value [{:departments {:cardiology #object[clojure.lang.PersistentQueue 0x6d0b3b22 "clojure.lang.PersistentQueue@50"]}} :cardiologry "2"], :error [nil (named (not (#{:neurology :cardiology :pediatrics} :cardiologry)) department) nil]} (logic.clj:80)
; expected:
(=
 {:departments {:cardiology (into m/Empty-Queue ["1" "2"])}}
 (arrives-at
  {:departments {:cardiology (into m/Empty-Queue ["1"])}}
  :cardiologry
  "2"))

; 184 tests finished, problems found. 😭 errors: 2, failures: 0, ns: 1, vars: 4
clj꞉clojure-property-based-testing.logic-test꞉> 
; Evaluating file: logic_test.clj
#'clojure-property-based-testing.logic-test/arrives-at-test
clj꞉clojure-property-based-testing.logic-test꞉> 
Reloading all the things...
Reloaded: (clojure-property-based-testing.generators.person-generator clojure-property-based-testing.models clojure-property-based-testing.logic clojure-property-based-testing.logic-test clojure-property-based-testing.core)
:ok
; Running test: arrives-at-test…
; 6 tests finished, all passing 👍, ns: 1, vars: 1
clj꞉clojure-property-based-testing.logic-test꞉> 
; Running all project tests…
; Running test: arrives-at-test…
; FAIL in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (logic_test.clj:72):
; expected:
[]

; actual:
nil

; FAIL in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (logic_test.clj:72):
; expected:
[]

; actual:
nil

; FAIL in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (logic_test.clj:72):
; expected:
[]

; actual:
nil

; FAIL in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (logic_test.clj:72):
; expected:
[]

; actual:
nil

; FAIL in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (logic_test.clj:72):
; expected:
[]

; actual:
nil

; FAIL in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (logic_test.clj:72):
; expected:
[]

; actual:
nil

; FAIL in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (logic_test.clj:72):
; expected:
[]

; actual:
nil

; FAIL in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (logic_test.clj:72):
; expected:
[]

; actual:
nil

; FAIL in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (logic_test.clj:72):
; expected:
[]

; actual:
nil

; FAIL in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (logic_test.clj:72):
; expected:
[]

; actual:
nil

; FAIL in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (logic_test.clj:72):
; expected:
[]

; actual:
nil

; FAIL in clojure-property-based-testing.logic-test/arrives-at-generated-schema-success-test (logic_test.clj:62):
; expected:
{:result true}

; actual:
{:fail [() :pediatrics "7xZ"],
 :failed-after-ms 3,
 :failing-size 6,
 :num-tests 7,
 :pass? false,
 :result false,
 :result-data nil,
 :seed 1749757843615,
 :shrunk
 {:depth 9,
  :pass? false,
  :result false,
  :result-data nil,
  :smallest [() :neurology "000"],
  :time-shrinking-ms 4,
  :total-nodes-visited 10},
 :test-var "arrives-at-generated-schema-success-test"}

; 85 tests finished, problems found. 😭 errors: 0, failures: 12, ns: 1, vars: 4
clj꞉clojure-property-based-testing.logic-test꞉> 
; 6 tests finished, all passing 👍, ns: 1, vars: 1
clj꞉clojure-property-based-testing.logic-test꞉> 
; Evaluating file: logic_test.clj
#'clojure-property-based-testing.logic-test/arrives-at-test
clj꞉clojure-property-based-testing.logic-test꞉> 
; Evaluating file: logic_test.clj
#'clojure-property-based-testing.logic-test/arrives-at-test
clj꞉clojure-property-based-testing.logic-test꞉> 
; Running all project tests…
; Running test: arrives-at-generated-schema-success-test…
; 184 tests finished, all passing 👍, ns: 1, vars: 4
clj꞉clojure-property-based-testing.logic-test꞉> 
; 151 tests finished, all passing 👍, ns: 1, vars: 1
clj꞉clojure-property-based-testing.logic-test꞉> 
; Evaluating file: logic_test.clj
#'clojure-property-based-testing.logic-test/arrives-at-test
clj꞉clojure-property-based-testing.logic-test꞉> 
; Evaluating file: logic_test.clj
#'clojure-property-based-testing.logic-test/arrives-at-test
clj꞉clojure-property-based-testing.logic-test꞉> 
Reloading all the things...
Reloaded: (clojure-property-based-testing.generators.person-generator clojure-property-based-testing.models clojure-property-based-testing.logic clojure-property-based-testing.logic-test clojure-property-based-testing.core)
:ok
; Running test: arrives-at-generated-schema-success-test…
; 4 tests finished, all passing 👍, ns: 1, vars: 1
clj꞉clojure-property-based-testing.logic-test꞉> 
; Running all project tests…
; Running test: arrives-at-generated-schema-success-test…
; 37 tests finished, all passing 👍, ns: 1, vars: 4
clj꞉clojure-property-based-testing.logic-test꞉> 
; 4 tests finished, all passing 👍, ns: 1, vars: 1
clj꞉clojure-property-based-testing.logic-test꞉> 
; Evaluating file: logic_test.clj
#'clojure-property-based-testing.logic-test/arrives-at-test
clj꞉clojure-property-based-testing.logic-test꞉> 
; Evaluating file: logic_test.clj
#'clojure-property-based-testing.logic-test/arrives-at-test
clj꞉clojure-property-based-testing.logic-test꞉> 
; Evaluating file: logic_test.clj
#'clojure-property-based-testing.logic-test/arrives-at-test
clj꞉clojure-property-based-testing.logic-test꞉> 
; Evaluating file: logic_test.clj
#'clojure-property-based-testing.logic-test/arrives-at-test
clj꞉clojure-property-based-testing.logic-test꞉> 
; Evaluating file: logic_test.clj
#'clojure-property-based-testing.logic-test/arrives-at-test
clj꞉clojure-property-based-testing.logic-test꞉> 
